// DDSUPPORT-7444

Перем ОсновнойМодуль;

Процедура Инициализировать(ОбработкаДиадок) Экспорт
	
	ОсновнойМодуль = ОбработкаДиадок;
	
КонецПроцедуры

Функция ОбработатьСобытиеДиадок(ИмяСобытия, Параметры, СтандартнаяОбработкаДиадок = Истина) Экспорт

	Если ИмяСобытия = "ПослеЗаполненияКонтента" Тогда    
		
		Возврат ОбработатьСобытиеПослеЗаполненияКонтента(Параметры);
		
	ИначеЕсли ИмяСобытия = "ПослеСозданияСчетФактуры" Тогда
		
		//ОбработатьСобытиеПослеСозданияСчетФактуры(Параметры);
		
	ИначеЕсли ИмяСобытия = "ПослеЗаполненияНовогоДокументаПоступления" Тогда
		
		//ОбработатьСобытиеПослеЗаполненияНовогоДокументаПоступления(Параметры);
	
	ИначеЕсли ИмяСобытия = "ТорговыеСетиЗаполнитьПараметрыХраненияНомераАкта" Тогда
		
		//Возврат ОбработатьСобытиеТорговыеСетиЗаполнитьПараметрыХраненияНомераАкта(Параметры);
		
	ИначеЕсли ИмяСобытия = "ТорговыеСетиПослеПроверкиДокумента" Тогда
		
		//ОбработатьСобытиеТорговыеСетиПослеПроверкиДокумента(Параметры);
		
	ИначеЕсли ИмяСобытия = "ТорговыеСетиПослеСопоставленияДокумента" Тогда
		
		//ОбработатьСобытиеТорговыеСетиПослеСопоставленияДокумента(Параметры);
		
	ИначеЕсли ИмяСобытия = "ТорговыеСетиПослеВыполненияОбработкиДокумента" Тогда
		
		//ОбработатьСобытиеТорговыеСетиПослеВыполненияОбработкиДокумента(Параметры);
		
	КонецЕсли;
	
КонецФункции

// Функция предназначена для изменения стандартного контента
//
// Параметры
//  Параметры - <Структура> - Содержит коллекцию, переданных параметров
// Возвращаемое значение:
//	Структура - Возвращает структуру, содержащую контент, соответствующего 
//				типа электронного документа
//
Функция ОбработатьСобытиеПослеЗаполненияКонтента(Параметры)

	DocumentType 	= Параметры.DocumentType;
	Content 		= Параметры.Content;
	ДокументСсылка 	= Параметры.ДокументСсылка;
	
	Если DocumentType = "XmlAcceptanceCertificate" Тогда
		
		ОбновитьContent_XmlAcceptanceCertificate(Content, ДокументСсылка);
		
		
	ИначеЕсли DocumentType = "Invoice" Тогда
		
		ОбновитьContent_Invoice(Content, ДокументСсылка);
		
	КонецЕсли;	

	Возврат Content;
	
КонецФункции // ОбработатьСобытиеПослеЗаполненияКонтента()

Процедура ОбновитьContent_XmlAcceptanceCertificate(Content, ДокументСсылка)
КонецПроцедуры

Процедура ОбновитьContent_Invoice(Content, ДокументСсылка)
КонецПроцедуры

//Процедура предназначена для изменения содержания нового (еще не записанного в базу) счета-фактуры.
Процедура ОбработатьСобытиеПослеСозданияСчетФактуры(Параметры)
	
	//СчетФактураОбъект= 	Параметры.СчетФактураОбъект;
	//РеализацияСсылка= 	Параметры.РеализацииСсылка;
	//Document= 			Параметры.Document;
	
	//СчетФактураОбъект.Комментарий= "Комментарий ПМ";
		
КонецПроцедуры //ОбработатьСобытиеПослеСозданияСчетФактуры()

//Процедура предназначена для изменения содержания нового (еще не записанного в базу) документа поступления.
Процедура ОбработатьСобытиеПослеЗаполненияНовогоДокументаПоступления(Параметры)
	
	//ДокументОбъект= Параметры.ДокументОбъект;
	//Document= 	  Параметры.Document;
	
	//ДокументОбъект.Комментарий= "Комментарий ПМ";
		
КонецПроцедуры //ОбработатьСобытиеПослеСозданияСчетФактуры()

// Функция предназначена для заполнения структуры определения места хранения поля номер_акта
//
//
Функция ОбработатьСобытиеТорговыеСетиЗаполнитьПараметрыХраненияНомераАкта(Параметры)
	
	/////////////////////////////////////////////////////////////////////////////////////
	// Вариант №1 значение поля "номер_акта" хранится в реквизите документа.
	/////////////////////////////////////////////////////////////////////////////////////
	Хранилище= "РеквизитДокумента";
	Ключ= 	   "НомерВходящегоСчетаФактуры"; // имя поля, в котором хранится номер акта.
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Вариант №2 значение поля "номер_акта" хранится как дополнительное свойство документа.
	////////////////////////////////////////////////////////////////////////////////////////////////////////
	//Хранилище= "ДополнительноеСвойство";
	//Ключ=  	   ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("ВнешнийНомер"); // Ссылка на дополнительное свойство документа, по которому хранится номер акта.
	
	
	ПараметрыХраненияНомераАкта= Новый Структура;
	ПараметрыХраненияНомераАкта.Вставить("Хранилище", Хранилище);
	ПараметрыХраненияНомераАкта.Вставить("Ключ"		, Ключ);
	
	Возврат ПараметрыХраненияНомераАкта;
	
КонецФункции

// Процедура предназначена для обработки подготовки коллекции выполняемых проверок документа
//
// Параметры
//	Параметры - <Структура> - Содержит коллекцию, переданных параметров
//
// Состав структуры:
//	КоллекцияПроверок - <ТаблицаЗначений> - Содержит перечень проверок, которые будет проходить документ.
//						Порядок выполнения проверок соответствует порядку строк в таблице.
//		Колонки таблицы:
//			ТипОшибки	   - <Строка> - Содержит следующие значения: "Ошибка", "Предупреждение", "Информация".
//			КлючОшибки	   - <Строка> - Уникальный идентификатор ошибки, пример: "НеправильныйКППКонтрагента".
//			ОписаниеОшибки - <Строка> - Пользовательское представление ошибки, может содержать детальную информацию.
//			СинонимОшибки  - <Строка> - Пользовательское представление ошибки, НЕ может содержать детальную информацию.
//											Необходимо заполнять если ошибка имеет тип "Предупреждение".
//
// 	Document 		  		  - <COMОбъект> - Объект Document AddInDiadocAPI.
// 	DocumentContent 		  - <COMОбъект> - Объектная модель данных Document AddInDiadocAPI.
// 	Документ1С 		  		  - <ДокументСсылка> - Ссылка на первичный документ в базе 1С для сопоставления.
// 	СписокДокументовНаПодпись - <СписокЗначений>
//			Значение	  - <ДокументСсылка> - Ссылка на первичный документ в базе 1С для сопоставления.
//			Представление - <Строка> 		 - DocumentId.
//
Процедура ОбработатьСобытиеТорговыеСетиПослеПроверкиДокумента(Параметры)
	
	КоллекцияОшибок= 			Параметры.КоллекцияОшибок;
	
	Document= 					Параметры.Document;
	DocumentContent= 			Параметры.DocumentContent;
	Документ1С= 				Параметры.Документ1С;
	СписокДокументовНаПодпись= 	Параметры.СписокДокументовНаПодпись;
	
	
	////////////////////////////////////////////////////
	// Пример переквалификации ошибки в предупреждение.
	////////////////////////////////////////////////////
	//ОшибкаНеправильныйКППКонтрагента= КоллекцияОшибок["НеправильныйКППКонтрагента"];
	//Если ОшибкаНеправильныйКППКонтрагента <> Неопределено Тогда
	//	ОшибкаНеправильныйКППКонтрагента.ТипОшибки= "Предупреждение";
	//	ОшибкаНеправильныйКППКонтрагента.СинонимОшибки= "Неправильный КПП поставщика";
	//КонецЕсли;
	
	
	////////////////////////////////////////////////////
	// Пример удаления ошибки КПП по определенному ящику.
	////////////////////////////////////////////////////
	Если КоллекцияОшибок["НеправильныйКППКонтрагента"] <> Неопределено И Document.Counteragent.Id = "8fd0af8abe934c7091b5ccd476ef1cb5@diadoc.ru" Тогда
		КоллекцияОшибок.Удалить("НеправильныйКППКонтрагента");
	КонецЕсли;
	
	
	///////////////////////////////////////////////////////////////////////////////
	// Пример отсрочки отказа в подписи по причине отсутствия документа в базе 1С.
	///////////////////////////////////////////////////////////////////////////////
	
	Если Document.type = "XMLTorg12" ИЛИ Document.type = "XmlAcceptanceCertificate" Тогда
		
		СтруктураОшибки= КоллекцияОшибок["ОшибкаВалидации"];
		
		Если СтруктураОшибки <> Неопределено И Найти(СтруктураОшибки.ОписаниеОшибки, "В нашей базе не найден документ") > 0 Тогда
			
			КрайняяДата= Document.DocumentDate + 7*60*60*24;
			
			Если КрайняяДата > ТекущаяДата() Тогда
				
				КоллекцияОшибок.Удалить("ОшибкаВалидации"); // Удаление стандартной ошибки
				
				ДобавитьОшибкуВКоллекцию(КоллекцияОшибок, "Предупреждение", "ОжиданиеРегистрацииДокумента", "Ожидает регистрацию документа в базе 1С до " + Формат(КрайняяДата, "ДФ=dd.MM.yyyy"), "Документы ожидающие регистрацию в базе 1С в течении 7 дней");
				//ДобавитьОшибкуВКоллекцию(КоллекцияОшибок, "ИсключительнаяОшибка", "ОжиданиеРегистрацииДокумента", "Ожидает регистрацию документа в базе 1С до " + Формат(КрайняяДата, "ДФ=dd.MM.yyyy"));
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОшибкаВалидации= КоллекцияОшибок["ОшибкаВалидации"];
	Если ОшибкаВалидации <> Неопределено И Найти(ОшибкаВалидации.ОписаниеОшибки, "номер_акта") > 0
		И Document.Counteragent.Id = "8fd0af8abe934c7091b5ccd476ef1cb5@diadoc.ru" Тогда
		
		КоллекцияОшибок.Очистить();
		
		ДобавитьОшибкуВКоллекцию(КоллекцияОшибок, "Предупреждение", "КонтрагентНеТоварный", "Контрагент не поставляет товары", "Контрагент не поставляет товары");
		
		Если Document.Department = Неопределено Тогда
			ДобавитьОшибкуВКоллекцию(КоллекцияОшибок, "Предупреждение", "ПеремещениеВПодразделение3", "Документ будет перемещен в Подразделение 3", "Документ будет перемещен в Подразделение 3");
		КонецЕсли;
				
	КонецЕсли;
		
	
	
	////////////////////////////////////////////////////
	// Пример добавления кастомной ошибки в коллекцию ошибок.
	////////////////////////////////////////////////////
	//ДобавитьОшибкуВКоллекцию(КоллекцияОшибок, "Ошибка", "КастомнаяУникальнаяОшибка", "Все неправильно!");

КонецПроцедуры

Процедура ДобавитьОшибкуВКоллекцию(КоллекцияОшибок, ТипОшибки, КлючОшибки, ОписаниеОшибки, СинонимОшибки= "")
	
	СтруктураОшибки= Новый Структура;
	СтруктураОшибки.Вставить("ТипОшибки"	 , ТипОшибки	 );
	СтруктураОшибки.Вставить("КлючОшибки"	 , КлючОшибки	 );
	СтруктураОшибки.Вставить("ОписаниеОшибки", ОписаниеОшибки);
	СтруктураОшибки.Вставить("СинонимОшибки" , СинонимОшибки );
	
	КоллекцияОшибок.Вставить(КлючОшибки, СтруктураОшибки);
	
КонецПроцедуры

// Процедура предназначена для выполнения кастомных действий после сопоставления документа
//
// Параметры
//	Параметры - <Структура> - Содержит коллекцию, переданных параметров
//
// Состав структуры:
// 	СтрокаТаблицы 	- <СтрокаТаблицыЗначений> - Строка таблицы документов.
// 	DocumentContent - <COMОбъект> 			  - Объектная модель данных Document AddInDiadocAPI.
//
Процедура ОбработатьСобытиеТорговыеСетиПослеСопоставленияДокумента(Параметры)
	
	СтрокаТаблицы= Параметры.СтрокаТаблицы;
	
	Document=	СтрокаТаблицы.ЭДОбъект;
	Документ1С= СтрокаТаблицы.ПервичныйДокумент;
	
	ЕстьОтклонениеСуммыНДСВПределахДопустимого= Ложь;
	
	Для Каждого ЭлементСписка ИЗ СтрокаТаблицы.СписокОшибок Цикл
		
		Если ЭлементСписка.Представление = "ОтклонениеСуммыНДСВПределахДопустимого" Тогда
			ЕстьОтклонениеСуммыНДСВПределахДопустимого= Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
			
	Если ЕстьОтклонениеСуммыНДСВПределахДопустимого Тогда
		
		DocumentContent= Document.GetContent();
		
		// Действие по регистрации документа корректировки.
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура предназначена для выполнения кастомных действий после сопоставления документа
//
// Параметры
//	Параметры - <Структура> - Содержит коллекцию, переданных параметров
//
// Состав структуры:
// 	СтрокаТаблицы 	- <СтрокаТаблицыЗначений> - Строка таблицы документов.
// 	DocumentContent - <COMОбъект> 			  - Объектная модель данных Document AddInDiadocAPI.
//
Процедура ОбработатьСобытиеТорговыеСетиПослеВыполненияОбработкиДокумента(Параметры)
	
	СтрокаТаблицы= Параметры.СтрокаТаблицы;
	
	Document=	СтрокаТаблицы.ЭДОбъект;
	Документ1С= СтрокаТаблицы.ПервичныйДокумент;
	
	Для Каждого ЭлементСписка ИЗ СтрокаТаблицы.СписокОшибок Цикл
		
		Если ЭлементСписка.Представление = "ПеремещениеВПодразделение3" Тогда
			Document.Move("0aad6a8e-bf0f-427c-a565-a64d0b1b3688");
			СтрокаТаблицы.Подразделение= "Подразделение 3";
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если (СтрокаТаблицы.СостояниеДокументооборота = "Документооборот не завершен. Требует уточнения" ИЛИ СтрокаТаблицы.СостояниеДокументооборота = "Отказано в подписи")
		 И Document.Department = Неопределено
	Тогда
		Document.Move("0aad6a8e-bf0f-427c-a565-a64d0b1b3688");
		СтрокаТаблицы.Подразделение= "Подразделение 3";
	КонецЕсли;
	
КонецПроцедуры


// Возвращает объект ВнешнейОбработки, который прикидывается объектом ТабличныйДокумент и позволяет парсить печатные формы.
Функция ЭДО_ПодключаемыйМодуль_ПолучитьЭмуляторТабличногоДокумента() Экспорт
	
	Результат = Неопределено;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("epf");
	ПолучитьМакет("ЭмуляторТабличногоДокумента_epf").Записать(ИмяВременногоФайла);
	
	Результат = ВнешниеОбработки.Создать(ИмяВременногоФайла,Ложь);
	
	УдалитьФайлы(ИмяВременногоФайла);
		
	Возврат Результат;
	
КонецФункции

Функция ЭДО_ПодключаемыйМодуль_ПолучитьВнешнююПечатнуюФорму(ДокументСсылка, НаименованиеОбработки)
	
	МетаданныеОбъекта = ДокументСсылка.Метаданные();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВнешниеОбработкиПринадлежность.Ссылка КАК Ссылка,
	|	ВнешниеОбработкиПринадлежность.ХранилищеВнешнейОбработки КАК ХранилищеВнешнейОбработки
	|ИЗ
	|	Справочник.ВнешниеОбработки.Принадлежность КАК ВнешниеОбработкиПринадлежность
	|ГДЕ
	|	НЕ ВнешниеОбработкиПринадлежность.Ссылка.ПометкаУдаления
	|	И ВнешниеОбработкиПринадлежность.СсылкаОбъекта = &Ссылка
	|	И ВнешниеОбработкиПринадлежность.Ссылка.Наименование = &НаименованиеОбработки
	|	И ВнешниеОбработкиПринадлежность.Ссылка.ВидОбработки = &ВидОбработки";
	
	Запрос.УстановитьПараметр("НаименованиеОбработки", НаименованиеОбработки);
	Запрос.УстановитьПараметр("ВидОбработки", Перечисления.ВидыДополнительныхВнешнихОбработок.ПечатнаяФорма);
	Запрос.УстановитьПараметр("Ссылка", Документы[МетаданныеОбъекта.Имя].ПустаяСсылка());
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
			
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("epf");
		Выборка.Ссылка.ХранилищеВнешнейОбработки.Получить().Записать(ИмяВременногоФайла);		
		ВнешняяПечатнаяФорма = ВнешниеОбработки.Создать(ИмяВременногоФайла, Ложь);		
		УдалитьФайлы(ИмяВременногоФайла);
		
		ВнешняяПечатнаяФорма.СсылкаНаОбъект = ДокументСсылка;
		
		Возврат ВнешняяПечатнаяФорма;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;	
	
КонецФункции