// DDSUPPORT-7444

Перем ОсновнойМодуль;

Процедура Инициализировать(ОбработкаДиадок) Экспорт
	
	ОсновнойМодуль = ОбработкаДиадок;
	
КонецПроцедуры

Функция ОбработатьСобытиеДиадок(ИмяСобытия, Параметры, СтандартнаяОбработкаДиадок = Истина) Экспорт

	Если ИмяСобытия = "ПослеЗаполненияКонтента" Тогда    
		
		Возврат ОбработатьСобытиеПослеЗаполненияКонтента(Параметры);
		
	ИначеЕсли ИмяСобытия = "ПослеСозданияСчетФактуры" Тогда
		
		//ОбработатьСобытиеПослеСозданияСчетФактуры(Параметры);
		
	ИначеЕсли ИмяСобытия = "ПослеЗаполненияНовогоДокументаПоступления" Тогда
		
		//ОбработатьСобытиеПослеЗаполненияНовогоДокументаПоступления(Параметры);
	
	ИначеЕсли ИмяСобытия = "ТорговыеСетиЗаполнитьПараметрыХраненияНомераАкта" Тогда
		
		//Возврат ОбработатьСобытиеТорговыеСетиЗаполнитьПараметрыХраненияНомераАкта(Параметры);
		
	ИначеЕсли ИмяСобытия = "ТорговыеСетиПослеПроверкиДокумента" Тогда
		
		//ОбработатьСобытиеТорговыеСетиПослеПроверкиДокумента(Параметры);
		
	ИначеЕсли ИмяСобытия = "ТорговыеСетиПослеСопоставленияДокумента" Тогда
		
		//ОбработатьСобытиеТорговыеСетиПослеСопоставленияДокумента(Параметры);
		
	ИначеЕсли ИмяСобытия = "ТорговыеСетиПослеВыполненияОбработкиДокумента" Тогда
		
		//ОбработатьСобытиеТорговыеСетиПослеВыполненияОбработкиДокумента(Параметры);
		
	КонецЕсли;
	
КонецФункции

// Функция предназначена для изменения стандартного контента
//
// Параметры
//  Параметры - <Структура> - Содержит коллекцию, переданных параметров
// Возвращаемое значение:
//	Структура - Возвращает структуру, содержащую контент, соответствующего 
//				типа электронного документа
//
Функция ОбработатьСобытиеПослеЗаполненияКонтента(Параметры)

	DocumentType 	= Параметры.DocumentType;
	Content 		= Параметры.Content;
	ДокументСсылка 	= Параметры.ДокументСсылка;
	
	Если DocumentType = "UniversalTransferDocument" и ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		
		ОбновитьContent_UniversalTransferDocument_РеализацияТоваровУслуг(Content, ДокументСсылка);
		
	ИначеЕсли DocumentType = "UniversalTransferDocument" и ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
		
		ОбновитьContent_UniversalTransferDocument_СчетФактураВыданный(Content, ДокументСсылка);
		
	КонецЕсли;	

	Возврат Content;
	
КонецФункции // ОбработатьСобытиеПослеЗаполненияКонтента()

Процедура ОбновитьContent_UniversalTransferDocument_РеализацияТоваровУслуг(Content, ДокументСсылка)
	
	// Заполнить шапку
	НомДог = СокрЛП(ДокументСсылка.ДоговорКонтрагента.Наименование);
	Content.Number = Сред(НомДог,1,Найти(НомДог," ")-1);
	
	// Заполнить товары
	Content.InvoiceTable.Items.Очистить();
	Шапка = РеализацияТоваровУслуг_СформироватьШапку(ДокументСсылка);
	таблицаУслуги = РеализацияТоваровУслуг_СформироватьТаблицуУслуг(ДокументСсылка, Шапка);
	
	Для Каждого СтрокаТабличнойЧасти Из ТаблицаУслуги Цикл
		
		item = Content.InvoiceTable.Items.Добавить();
		item.Product = СтрокаТабличнойЧасти.Товар;
		item.TaxRate = ОсновнойМодуль.Модуль_ИнтеграцияОбщий.ПолучитьПредставлениеСтавкиНДС( СтрокаТабличнойЧасти.СтавкаНДС, Истина );
		item.Subtotal = СтрокаТабличнойЧасти.Сумма;
		item.Vat = СтрокаТабличнойЧасти.СуммаНДС;
		item.SubtotalWithVatExcluded = СтрокаТабличнойЧасти.СуммаБезНДС;
		
		item.StructedAdditionalInfos = Новый Массив;
		
		Если Шапка.ВалютаДокумента.Код <> "643" Тогда
			// Если в валюте
			
		    СтрокаКода = "643";
			Валюты = Справочники.Валюты;
			НайденнаяСсылка = Валюты.НайтиПоКоду(СтрокаКода);
			
			СуммаРуб = СтрокаТабличнойЧасти.СуммаРублевая;//Окр(СтрокаТабличнойЧасти.Сумма*КурсВзаиморасчетов,2);
			СуммаНДСРуб = ?(СтрокаТабличнойЧасти.СуммаНДС<>0,Окр(СуммаРуб*18/118,2),0);//Окр(СтрокаТабличнойЧасти.Сумма*Шапка.КурсВзаиморасчетов,2);
			
			item.Product = СокрЛП(СтрокаТабличнойЧасти.Товар)+?(СтрокаТабличнойЧасти.СуммаНДС<>0,?(Шапка.СуммаВключаетНДС, ", в т.ч. НДС"+СтрокаТабличнойЧасти.СтавкаНДС+" - "+ОбщегоНазначения.ФорматСумм(СтрокаТабличнойЧасти.СуммаНДС,Шапка.ВалютаДокумента)+"/"+ОбщегоНазначения.ФорматСумм(СуммаНДСРуб,НайденнаяСсылка), ", НДС"+СтрокаТабличнойЧасти.СтавкаНДС+" - "+ОбщегоНазначения.ФорматСумм(СтрокаТабличнойЧасти.СуммаНДС,Шапка.ВалютаДокумента)+"/"+ОбщегоНазначения.ФорматСумм(СуммаНДСРуб,НайденнаяСсылка)),", "+?(СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС,"Без НДС","НДС 0%"));
			
			item.StructedAdditionalInfos.Добавить(Новый Структура("key,value", "СуммаРуб", СуммаРуб));
		Иначе
			// Если в рублях
			
			item.Product = СокрЛП(СтрокаТабличнойЧасти.Товар)+?(СтрокаТабличнойЧасти.СуммаНДС<>0,?(Шапка.СуммаВключаетНДС, ", в т.ч. НДС"+СтрокаТабличнойЧасти.СтавкаНДС+" - "+ОбщегоНазначения.ФорматСумм(СтрокаТабличнойЧасти.СуммаНДС), ", НДС"+СтрокаТабличнойЧасти.СтавкаНДС+" - "+ОбщегоНазначения.ФорматСумм(СтрокаТабличнойЧасти.СуммаНДС)),", "+?(СтрокаТабличнойЧасти.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС,"Без НДС","НДС 0%"));
		КонецЕсли;

	КонецЦикла;
	
	Content.InvoiceTable.Total = Content.InvoiceTable.Items.Итог("Subtotal");
	Content.InvoiceTable.TotalWithVatExcluded = Content.InvoiceTable.Items.Итог("SubtotalWithVatExcluded");
	Content.InvoiceTable.Vat = Content.InvoiceTable.Items.Итог("Vat");
	
КонецПроцедуры

Функция РеализацияТоваровУслуг_СформироватьТаблицуУслуг(ДокументСсылка, Шапка)
	
	СуммаВзаиморасчетов   = 0;
	СуммаВзаиморасчетов62 = 0;
	
	ЗапросУслуги = Новый Запрос;
	ЗапросУслуги.УстановитьПараметр("ТекущийДокумент", ДокументСсылка);
	
	ЧастьЗапросаДляВыбораСодержанияУслуг = ФормированиеПечатныхФорм.ПолучитьЧастьЗапросаДляВыбораСодержанияУслуг("РеализацияТоваровУслуг");
	
	ЗапросУслуги.Текст =
	"ВЫБРАТЬ
	|	Номенклатура КАК Номенклатура,
	|	ВЫРАЗИТЬ(Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК Товар,
	|	Количество,
	|	ЕдиницаИзмерения  КАК ЕдиницаИзмерения,
	|	Цена,
	|	Сумма,
	|	СтавкаНДС,
	|	СуммаНДС,
	|	0 КАК СТА_СуммаРуб,
	|	0 КАК СТА_СуммаНДСРуб
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|	И
	|	РеализацияТоваровУслуг.Номенклатура.Услуга = Истина
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
	|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
	|	Количество,
	|	Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Цена,
	|	Сумма,
	|	СтавкаНДС,
	|	СуммаНДС,
	|	СТА_СуммаРуб,
	|	СТА_СуммаНДСРуб
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.АгентскиеУслуги КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
	|	" + ЧастьЗапросаДляВыбораСодержанияУслуг + ",
	|	Количество,
	|	Номенклатура.БазоваяЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Цена,
	|	Сумма,
	|	СтавкаНДС,
	|	СуммаНДС,
	|	0,
	|	0
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	ТаблицаУслуги = ЗапросУслуги.Выполнить().Выгрузить();
	
	ЗапросДляКурса = Новый Запрос;
	ЗапросДляКурса.УстановитьПараметр("Ссылка", ДокументСсылка);
	ЗапросДляКурса.УстановитьПараметр("СчетУчетаРасчетовСКонтрагентом", ДокументСсылка.СчетУчетаРасчетовСКонтрагентом);
	Текст = 
	"ВЫБРАТЬ
	|	СУММА(Хозрасчетный.Сумма) КАК Сумма
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|ГДЕ
	|	Хозрасчетный.Регистратор = &Ссылка
	|	И Хозрасчетный.СчетДт = &СчетУчетаРасчетовСКонтрагентом
	|	И Хозрасчетный.СчетКт В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				РеализацияТоваровУслугТовары.СчетДоходов
	|			ИЗ
	|				Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|			ГДЕ
	|				РеализацияТоваровУслугТовары.Ссылка = Хозрасчетный.Регистратор
	|
	|           ОБЪЕДИНИТЬ
	|
	|			ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				РеализацияТоваровУслугАгентскиеУслуги.СчетРасчетов
	|			ИЗ
	|				Документ.РеализацияТоваровУслуг.АгентскиеУслуги КАК РеализацияТоваровУслугАгентскиеУслуги
	|			ГДЕ
	|				РеализацияТоваровУслугАгентскиеУслуги.Ссылка = Хозрасчетный.Регистратор
	|
	|           ОБЪЕДИНИТЬ
	|
	|			ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				РеализацияТоваровУслугУслуги.СчетДоходов
	|			ИЗ
	|				Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
	|			ГДЕ
	|				РеализацияТоваровУслугУслуги.Ссылка = Хозрасчетный.Регистратор)
	|";
	ЗапросДляКурса.Текст = Текст;
	СуммаВзаиморасчетов = ЗапросДляКурса.Выполнить().Выгрузить()[0].Сумма;
	
	// 20_12_12
	Если СуммаВзаиморасчетов = NULL Тогда
		СуммаВзаиморасчетов = 0;
	КонецЕсли;
	
	// сумма по 62-ому счету
	Если ЗначениеЗаполнено(ДокументСсылка.СчетРазделУчета) И (ДокументСсылка.СчетУчетаРасчетовСКонтрагентом <> ДокументСсылка.СчетРазделУчета) Тогда
		ЗапросДляКурса62 = Новый Запрос;
		ЗапросДляКурса62.УстановитьПараметр("Ссылка", ДокументСсылка);
		ЗапросДляКурса62.УстановитьПараметр("СчетУчетаРасчетовСКонтрагентом", ДокументСсылка.СчетРазделУчета);
		Текст = 
		"ВЫБРАТЬ
		|	СУММА(Хозрасчетный.Сумма) КАК Сумма
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Регистратор = &Ссылка
		|	И Хозрасчетный.СчетДт = &СчетУчетаРасчетовСКонтрагентом
		|	И Хозрасчетный.СчетКт В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				РеализацияТоваровУслугУслуги.СчетДоходов
		|			ИЗ
		|				Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
		|			ГДЕ
		|				РеализацияТоваровУслугУслуги.Ссылка = Хозрасчетный.Регистратор)
		|";
		ЗапросДляКурса62.Текст = Текст;
		СуммаВзаиморасчетов62 = ЗапросДляКурса62.Выполнить().Выгрузить()[0].Сумма;
	КонецЕсли;
   	// сумма по 62-ому счету
	// 20_12_12
	Если СуммаВзаиморасчетов62 = NULL Тогда
		СуммаВзаиморасчетов62 = 0;
	КонецЕсли;
	
	ТаблицаУслуги.Колонки.Добавить("СуммаБезНДС");
	ТаблицаУслуги.Колонки.Добавить("СуммаРублевая");
	ТаблицаУслуги.Колонки.Добавить("Вознаграждение");
	
	
	МассивРаспределения = Новый Массив;
	МассивРаспределения62 = Новый Массив;
	РегРуб = Новый Массив;
	РегРуб62 = Новый Массив;
	
	Для Каждого СтрокаТовар Из ТаблицаУслуги Цикл
		
		Если Найти(СтрокаТовар.Номенклатура,"Вознаграждение ") > 0 Тогда
			СтрокаТовар.Вознаграждение = Истина;
		Иначе
			СтрокаТовар.Вознаграждение = Ложь;
		КонецЕсли;
			
	КонецЦикла;
	
	СтруктураОтбора1     = Новый Структура("Вознаграждение",Истина);
	СтрокиВознаграждения = ТаблицаУслуги.НайтиСтроки(СтруктураОтбора1);
	ТУ1 = ТаблицаУслуги.Скопировать(СтрокиВознаграждения);
	
	СтруктураОтбора2 = Новый Структура("Вознаграждение",Ложь);
	СтрокиАгента     = ТаблицаУслуги.НайтиСтроки(СтруктураОтбора2);
	ТУ2 = ТаблицаУслуги.Скопировать(СтрокиАгента);
	
	Если ДокументСсылка.Услуги.Количество() > 1 Тогда
		
		Для Каждого СтрокаТовар Из ТУ1 Цикл
			
			СуммаСНДС = СтрокаТовар.Сумма + ?(Шапка.СуммаВключаетНДС, 0, СтрокаТовар.СуммаНДС);
			СуммаБезНДС = СуммаСНДС - СтрокаТовар.СуммаНДС;
			
			МассивРаспределения62.Добавить(СуммаСНДС);
			РегРуб62.Добавить(СтрокаТовар.СТА_СуммаРуб);
			СтрокаТовар.СуммаБезНДС = СуммаБезНДС;
			
		КонецЦикла;
		//ТаблицаУслуги.Колонки.Добавить("СуммаРублевая");
		//
		//НомерСтр = ТаблицаУслуги.Количество() - 1;
		//ТаблицаУслуги[НомерСтр].СуммаРублевая = СуммаВзаиморасчетов62;
		//
	
		//ТУ1 = РаспределитьСуммуПоСтолбцу(МассивРаспределения62, СуммаВзаиморасчетов62, ТУ1, "СуммаРублевая");//||+СуммаВзаиморасчетов62, ТаблицаУслуги, "СуммаРублевая");
		РегРуб62 = СТАСервер.РаспределитьПропорционально(СуммаВзаиморасчетов62,МассивРаспределения62,РегРуб62);//ТаблицаУслуги.ВыгрузитьКолонку("СТА_СуммаРуб"));
		ТУ1.ЗагрузитьКолонку(РегРуб62,"СуммаРублевая");
		
		Для Каждого СтрокаТовар Из ТУ2 Цикл
			
			СуммаСНДС = СтрокаТовар.Сумма + ?(Шапка.СуммаВключаетНДС, 0, СтрокаТовар.СуммаНДС);
			СуммаБезНДС = СуммаСНДС - СтрокаТовар.СуммаНДС;
			
			МассивРаспределения.Добавить(СуммаСНДС);
			РегРуб.Добавить(СтрокаТовар.СТА_СуммаРуб);
			СтрокаТовар.СуммаБезНДС = СуммаБезНДС;
			
		КонецЦикла;
		//ТаблицаУслуги.Колонки.Добавить("СуммаРублевая");
		//
		//НомерСтр = ТаблицаУслуги.Количество() - 1;
		//ТаблицаУслуги[НомерСтр].СуммаРублевая = СуммаВзаиморасчетов62;
		//
		
		//ТУ2 = РаспределитьСуммуПоСтолбцу(МассивРаспределения, СуммаВзаиморасчетов, ТУ2, "СуммаРублевая");//||+СуммаВзаиморасчетов62, ТаблицаУслуги, "СуммаРублевая");
		РегРуб = СТАСервер.РаспределитьПропорционально(СуммаВзаиморасчетов,МассивРаспределения,РегРуб);//ТаблицаУслуги.ВыгрузитьКолонку("СТА_СуммаРуб"));
		ТУ2.ЗагрузитьКолонку(РегРуб,"СуммаРублевая");
		ТаблицаУслуги.Очистить();
		
		Для Каждого СтрТУ2 ИЗ ТУ2 Цикл
			НовСтр = ТаблицаУслуги.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр,СтрТУ2);
		КонецЦикла;
		
		Для Каждого СтрТУ1 ИЗ ТУ1 Цикл
			НовСтр = ТаблицаУслуги.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтр,СтрТУ1);
		КонецЦикла;
	// исправления от 04.03.2014
	Иначе
		
		Для Каждого СтрокаТовар Из ТаблицаУслуги Цикл
			
			Если Найти(СтрокаТовар.Номенклатура,"Вознаграждение ") > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			
			СуммаСНДС = СтрокаТовар.Сумма + ?(Шапка.СуммаВключаетНДС, 0, СтрокаТовар.СуммаНДС);
			СуммаБезНДС = СуммаСНДС - СтрокаТовар.СуммаНДС;
			
			МассивРаспределения.Добавить(СуммаСНДС);
			СтрокаТовар.СуммаБезНДС = СуммаБезНДС;
			
		КонецЦикла;
		
		Если ТаблицаУслуги.Колонки.Найти("СуммаРублевая") = Неопределено Тогда
			ТаблицаУслуги.Колонки.Добавить("СуммаРублевая");
		КонецЕсли;
		//
		НомерСтр = ТаблицаУслуги.Количество() - 1;
		//ТаблицаУслуги[НомерСтр].СуммаРублевая = СуммаВзаиморасчетов62;
		ТаблицаУслуги[НомерСтр].СТА_СуммаРуб = СуммаВзаиморасчетов62;
		//
		//ТаблицаУслуги = РаспределитьСуммуПоСтолбцу(МассивРаспределения, СуммаВзаиморасчетов, ТаблицаУслуги, "СуммаРублевая");
		РаспределениеРег = СТАСервер.РаспределитьПропорционально(СуммаВзаиморасчетов62+СуммаВзаиморасчетов,ТаблицаУслуги.ВыгрузитьКолонку("Сумма"),ТаблицаУслуги.ВыгрузитьКолонку("СТА_СуммаРуб"));
		ТаблицаУслуги.ЗагрузитьКолонку(РаспределениеРег,"СуммаРублевая");
	КонецЕсли;
	
	Возврат ТаблицаУслуги;
	
КонецФункции

Функция РеализацияТоваровУслуг_СформироватьШапку(ДокументСсылка)
	
	ЗапросШапка = Новый Запрос;
	ЗапросШапка.УстановитьПараметр("ТекущийДокумент", ДокументСсылка);
	ЗапросШапка.Текст =
	"ВЫБРАТЬ
	|	Номер,
	|	Дата,
	|	ДоговорКонтрагента,
	|	Контрагент КАК Получатель,
	|	Организация КАК Поставщик,
	|	Организация,
	|	СуммаДокумента,
	|	ВалютаДокумента,
	|	КурсВзаиморасчетов,
	|	УчитыватьНДС,
	|	СуммаВключаетНДС
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
	Шапка = ЗапросШапка.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Возврат Шапка;
	
КонецФункции


Процедура ОбновитьContent_UniversalTransferDocument_СчетФактураВыданный(Content, ДокументСсылка)
	
	ДанныеДляПечати = СчетФактура_СформироватьОбщиеДанныеДляПечати(ДокументСсылка);
	
	Content.Number = ОбщегоНазначения.ПолучитьНомерНаПечать(ДокументСсылка);
	Content.Date = ДанныеДляПечати.Дата;
		
	Если ДанныеДляПечати.Свойство("ТаблицаДатОплат") Тогда
		Для каждого ПараметрыДокументаОплаты Из ДанныеДляПечати.ТаблицаДатОплат Цикл
			
			Если НЕ ЗначениеЗаполнено(ПараметрыДокументаОплаты.НомерПлатежноРасчетногоДокумента)
				И НЕ ЗначениеЗаполнено(ПараметрыДокументаОплаты.ДатаПлатежноРасчетногоДокумента) Тогда
				Продолжить;
			КонецЕсли;
			
			строкаПлатежа = Content.PaymentDocuments.Добавить();
			строкаПлатежа.Number = ПараметрыДокументаОплаты.НомерПлатежноРасчетногоДокумента;
			строкаПлатежа.Date = ПараметрыДокументаОплаты.ДатаПлатежноРасчетногоДокумента;
			
		КонецЦикла;
	Конецесли;
	
	Content.InvoiceTable.Items.Очистить();
	
	ТаблицаСтрокТовары = ДанныеДляПечати.ТабличнаяЧасть;
 	ТаблицаСтрокТовары.Колонки.Добавить("СуммаБезНДС");
	ТаблицаСтрокТовары.Колонки.Добавить("СуммаСНДС");
	
	Для Каждого Строчка Из ТаблицаСтрокТовары Цикл
		
		Строчка.СуммаСНДС = Строчка.Сумма + ?(Строчка.СуммаВключаетНДС, 0, Строчка.СуммаНДС);
       	Строчка.СуммаБезНДС = Строчка.СуммаСНДС - Строчка.СуммаНДС;
		
		Если Строчка.СуммаВключаетНДС Тогда
			Строчка.Цена = 0;
		КонецЕсли;
		
		Если ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию 
			И Строчка.Количество <> 0
			И (Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120
			ИЛИ Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118
			ИЛИ Строчка.СтавкаНДС = Перечисления.СтавкиНДС.НДС10_110) Тогда
			
			Строчка.Цена = Окр(Строчка.СуммаСНДС / Строчка.Количество, 2);
			
		КонецЕсли;	
					
		Если НЕ ЗначениеЗаполнено(Строчка.ЕдиницаИзмерения) Тогда
			Строчка.Количество = 0;
			Строчка.Цена = 0;
		ИначеЕсли Строчка.Количество = 0 Тогда
			Строчка.ЕдиницаИзмерения = "";
			Строчка.Цена = 0;
		ИначеЕсли Строчка.Цена = 0 Тогда
			Строчка.Цена = Окр(Строчка.СуммаБезНДС / Строчка.Количество, 2);
		КонецЕсли;
		
	КонецЦикла;
	
	КолонкиДляСвертки = ?(ТаблицаСтрокТовары.Колонки.Найти("Контрагент") <> Неопределено, "Контрагент,", "")
		+ "Товар,ТоварНаименование,ТоварКод,СтранаПроисхождения,СтранаПроисхожденияКод,ПредставлениеСтраны,"
		+ "НомерГТД,ПредставлениеГТД,ЕдиницаИзмерения,ЕдиницаИзмеренияКод,Цена,СтавкаНДС";
	ТаблицаСтрокТовары.Свернуть(КолонкиДляСвертки, "Количество,Сумма,СуммаНДС,СуммаСНДС,СуммаБезНДС");
	
	ТаблицаСтрокТовары.Колонки.Добавить("НомерСтроки", ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(10, 0));
	НомерСтроки = 0;
	Для Каждого Строчка Из ТаблицаСтрокТовары Цикл
		НомерСтроки = НомерСтроки + 1;
		Строчка.НомерСтроки = НомерСтроки;
	КонецЦикла;
	
	
	ИтогоСтоимость = 0;
	ИтогоСуммаНДС  = 0;
	ИтогоВсего     = 0;
	
	Для Каждого Строчка Из ТаблицаСтрокТовары Цикл
		
		item = Content.InvoiceTable.Items.Добавить();
		item.StructedAdditionalInfos = Новый Массив;
		item.Product = Строчка.ТоварНаименование;
		
		Если НЕ ЗначениеЗаполнено(Строчка.ТоварНаименование) Тогда
			item.Product = Строчка.Товар;
		КонецЕсли;
		item.Product = СокрЛП(item.Product);
		
		Если ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию Тогда
			item.SubtotalWithVatExcluded = Строчка.СуммаБезНДС;
			item.Price      = Строчка.Цена;
		Иначе
			Если ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент
				ИЛИ ДанныеДляПечати.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу Тогда
				item.SubtotalWithVatExcluded = Строчка.СуммаБезНДС;
			Иначе
				item.SubtotalWithVatExcluded = 0;
			КонецЕсли;
			item.Quantity = 0;
			item.Price       = 0;
		КонецЕсли;
		
		item.Subtotal     = Строчка.СуммаСНДС;
		item.TaxRate = ОсновнойМодуль.Модуль_ИнтеграцияОбщий.ПолучитьПредставлениеСтавкиНДС( Строчка.СтавкаНДС, Истина );
		item.Vat = Строчка.СуммаНДС;
		
		//Если ДанныеДляПечати.ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАванс
		//	И ДанныеДляПечати.ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента 
		//	И ДанныеДляПечати.ВидСчетаФактуры <> Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку Тогда
		//	item.Excise  = "без акциза";
		//КонецЕсли;
		
		ИтогоСтоимость = ИтогоСтоимость + Строчка.СуммаБезНДС;
		ИтогоСуммаНДС  = ИтогоСуммаНДС + Строчка.СуммаНДС;
		ИтогоВсего     = ИтогоВсего    + Строчка.СуммаСНДС;
		
	КонецЦикла;
	
	Content.InvoiceTable.Total = ИтогоВсего;
	Content.InvoiceTable.TotalWithVatExcluded = ИтогоСтоимость;
	Content.InvoiceTable.Vat = ИтогоСуммаНДС;
	
КонецПроцедуры

Функция СчетФактура_СформироватьОбщиеДанныеДляПечати(ДокументСсылка)
	
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Если ДокументСсылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию
		ИЛИ ДокументСсылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.Корректировочный
		И ДокументСсылка.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(ДокументСсылка.Дата, Неопределено, ДокументСсылка.Организация);
	КонецЕсли;

	
	Если ДокументСсылка.Дата >= '20060101000000' Тогда
		мНадписьПредоплата = "Предварительная оплата";
	Иначе
		мНадписьПредоплата = "Авансовый платеж";
	КонецЕсли;
	
	Если ДокументСсылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку
		И ДокументСсылка.СводныйКомиссионный
		И ДокументСсылка.Авансы.Количество() > 0 Тогда
		СписокОснований = Новый Массив;
		СписокОснований.Добавить(ДокументСсылка.Авансы[0].ДокументОснование);
	Иначе
		СписокОснований = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(
			ДокументСсылка.ДокументыОснования.ВыгрузитьКолонку("ДокументОснование"), Истина);
	КонецЕсли;
	
	ОбщиеДанныеДляПечати = Неопределено;
	
	ДанныеСчетаФактуры = Новый Структура();
	ДанныеСчетаФактуры.Вставить("Ссылка", 							ДокументСсылка);
	ДанныеСчетаФактуры.Вставить("Номер",  							ДокументСсылка.Номер);
	ДанныеСчетаФактуры.Вставить("Дата",   							ДокументСсылка.Дата);
	ДанныеСчетаФактуры.Вставить("Организация",   					ДокументСсылка.Организация);
	ДанныеСчетаФактуры.Вставить("Контрагент",   					ДокументСсылка.Контрагент);
	ДанныеСчетаФактуры.Вставить("ДоговорКонтрагента",               ДокументСсылка.ДоговорКонтрагента);
	ДанныеСчетаФактуры.Вставить("ДокументОснование",                ДокументСсылка.ДокументОснование);
	ДанныеСчетаФактуры.Вставить("ВидСчетаФактуры",                  ДокументСсылка.ВидСчетаФактуры);
	ДанныеСчетаФактуры.Вставить("Исправление",                 		ДокументСсылка.Исправление);
	ДанныеСчетаФактуры.Вставить("НомерИсправления",                 ДокументСсылка.НомерИсправления);
	ДанныеСчетаФактуры.Вставить("НомерИсходногоДокумента",          ДокументСсылка.НомерИсходногоДокумента);
	ДанныеСчетаФактуры.Вставить("ДатаИсходногоДокумента",           ДокументСсылка.ДатаИсходногоДокумента);
	ДанныеСчетаФактуры.Вставить("НомерПлатежноРасчетногоДокумента", ДокументСсылка.НомерПлатежноРасчетногоДокумента);
	ДанныеСчетаФактуры.Вставить("ДатаПлатежноРасчетногоДокумента",  ДокументСсылка.ДатаПлатежноРасчетногоДокумента);
	ДанныеСчетаФактуры.Вставить("СчетФактураБезНДС",                ДокументСсылка.СчетФактураБезНДС);
	ДанныеСчетаФактуры.Вставить("Продавец",               			ДокументСсылка.Продавец);
	ДанныеСчетаФактуры.Вставить("СводныйКомиссионный",              ДокументСсылка.СводныйКомиссионный);
	
	Для каждого ТекущееОснование из СписокОснований Цикл
		Если Не ЗначениеЗаполнено(ТекущееОснование) Тогда
			Продолжить;
		КонецЕсли; 
		
		//ДанныеДляПечати = УчетНДС.СобратьДанныеДляПечатиСчетаФактуры(ТекущееОснование, ДанныеСчетаФактуры);
		ДанныеДляПечати = СобратьДанныеДляПечатиСчетаФактуры(ТекущееОснование, ДанныеСчетаФактуры);
		
		Если ДанныеДляПечати = Неопределено или ТипЗнч(ДанныеДляПечати) = Тип("Соответствие") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокументСсылка.Руководитель) Тогда
			Если ДанныеДляПечати.Свойство("ФИОРуководителя") Тогда 
				ДанныеДляПечати.ФИОРуководителя = ОбщегоНазначения.ФамилияИнициалыФизЛица(ДокументСсылка.Руководитель);
			ИначеЕсли ДанныеДляПечати.Свойство("ФИОПБОЮЛ") Тогда
				ДанныеДляПечати.ФИОПБОЮЛ = ОбщегоНазначения.ФамилияИнициалыФизЛица(ДокументСсылка.Руководитель);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокументСсылка.ГлавныйБухгалтер) И ДанныеДляПечати.Свойство("ФИОГлавногоБухгалтера") Тогда
			ДанныеДляПечати.ФИОГлавногоБухгалтера = ОбщегоНазначения.ФамилияИнициалыФизЛица(ДокументСсылка.ГлавныйБухгалтер);
		КонецЕсли;
		
		ДанныеДляПечати.ТабличнаяЧасть.ЗаполнитьЗначения(ДанныеДляПечати.СуммаВключаетНДС, "СуммаВключаетНДС");
		
		РасчетыВУсловныхЕдиницах = Ложь;
		
		Если ЗначениеЗаполнено(ДокументСсылка.ДоговорКонтрагента) Тогда
			РасчетыВУсловныхЕдиницах = ДокументСсылка.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах;
		ИначеЕсли ТипЗнч(ТекущееОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
			РасчетыВУсловныхЕдиницах = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекущееОснование, "ДоговорКонтрагента").РасчетыВУсловныхЕдиницах;
		КонецЕсли;	
		
		//Если ТекДанные.РасчетыВУсловныхЕдиницах Тогда
		//	РасчетыВУсловныхЕдиницах = ТекДанные.РасчетыВУсловныхЕдиницах;
		//КонецЕсли;
		
		Если ДокументСсылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию
			И РасчетыВУсловныхЕдиницах 
			И ДанныеДляПечати.Валюта <> мВалютаРегламентированногоУчета Тогда
			
			Если УчетнаяПолитика <> Неопределено 
				И (УчетнаяПолитика.ФормироватьСчетФактуруПоУЕвРублях
				ИЛИ УчетНДС.ПолучитьВерсиюПостановления(ДокументСсылка.Дата) = 2) Тогда
				
				//УчетНДС.ПерезаполнитьСуммыПоУЕвРублях(ДанныеДляПечати, ТекущееОснование, ДанныеСчетаФактуры);
				ПерезаполнитьСуммыПоУЕвРублях(ДанныеДляПечати, ТекущееОснование, ДанныеСчетаФактуры);
				ДанныеДляПечати.Валюта = мВалютаРегламентированногоУчета;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОбщиеДанныеДляПечати = Неопределено Тогда
			ОбщиеДанныеДляПечати = ДанныеДляПечати;
		Иначе
			Для Каждого СтрДанных Из ДанныеДляПечати Цикл
				
				Если СтрДанных.Ключ = "ТабличнаяЧасть" Тогда
					ОбщаяТабЧасть = ОбщиеДанныеДляПечати.ТабличнаяЧасть;
					ТекущаяТабЧасть = СтрДанных.Значение;
					
					Для Каждого СтрокаТекущейТабЧасть Из ТекущаяТабЧасть Цикл
						СтрокаТабЧасти = ОбщаяТабЧасть.Добавить();
						ЗаполнитьЗначенияСвойств(СтрокаТабЧасти, СтрокаТекущейТабЧасть);
					КонецЦикла;
				Иначе
					Если Не ОбщиеДанныеДляПечати.Свойство(СтрДанных.Ключ) Тогда
						// Если данный параметр для печати шапки документа еще не  определен - то определяем его
						ОбщиеДанныеДляПечати.Вставить(СтрДанных.Ключ, СтрДанных.Значение);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
	Если ОбщиеДанныеДляПечати = Неопределено Тогда
		Возврат ОбщиеДанныеДляПечати;
	КонецЕсли;
	
	ТаблицаДатОплат = ДокументСсылка.ДатаНомерДокументовОплаты.Выгрузить();
	ТаблицаДатОплат.Свернуть("ДатаПлатежноРасчетногоДокумента, НомерПлатежноРасчетногоДокумента");
	СтрокиКУдалению = Новый массив();
	Для каждого СтрокаОплат Из ТаблицаДатОплат Цикл
		Если не ЗначениеЗаполнено(СтрокаОплат.ДатаПлатежноРасчетногоДокумента) 
			и ПустаяСтрока(СтрокаОплат.НомерПлатежноРасчетногоДокумента) Тогда
			СтрокиКУдалению.Добавить(СтрокаОплат);
		КонецЕсли; 
	КонецЦикла; 
	Для каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
		ТаблицаДатОплат.Удалить(СтрокаКУдалению);
	КонецЦикла; 
	
	ОбщиеДанныеДляПечати.Вставить("ТаблицаДатОплат", 	ТаблицаДатОплат);
	ОбщиеДанныеДляПечати.Вставить("ДокументыОснования", СписокОснований);
	ОбщиеДанныеДляПечати.Вставить("КППКонтрагента",  	ДокументСсылка.КППКонтрагента);
	
	Если ДокументСсылка.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку
		И (ЗначениеЗаполнено(ДокументСсылка.ДатаДокументаАвансаКомитента)
		ИЛИ ЗначениеЗаполнено(ДокументСсылка.НомерДокументаАвансаКомитента)) Тогда
		НоваяСтрока = ТаблицаДатОплат.Добавить();
		НоваяСтрока.ДатаПлатежноРасчетногоДокумента  = ДокументСсылка.ДатаДокументаАвансаКомитента;
		НоваяСтрока.НомерПлатежноРасчетногоДокумента = ДокументСсылка.НомерДокументаАвансаКомитента;
	КонецЕсли;
	
	ДополнительнаяКолонкаПечатныхФормДокументов = Константы.ДополнительнаяКолонкаПечатныхФормДокументов.Получить();
	Если ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.НеВыводить Тогда
		ОбщиеДанныеДляПечати.ТабличнаяЧасть.ЗаполнитьЗначения("", "ТоварКод");
		ОбщиеДанныеДляПечати.ТабличнаяЧасть.Колонки.Удалить("ТоварАртикул");
	ИначеЕсли ДополнительнаяКолонкаПечатныхФормДокументов = Перечисления.ДополнительнаяКолонкаПечатныхФормДокументов.Артикул Тогда
		ОбщиеДанныеДляПечати.ТабличнаяЧасть.Колонки.Удалить("ТоварКод");
		ОбщиеДанныеДляПечати.ТабличнаяЧасть.Колонки.ТоварАртикул.Имя = "ТоварКод";
	Иначе
		ОбщиеДанныеДляПечати.ТабличнаяЧасть.Колонки.Удалить("ТоварАртикул");
	КонецЕсли;
	
	Возврат ОбщиеДанныеДляПечати;
КонецФункции

Процедура ПерезаполнитьСуммыПоУЕвРублях(ДанныеДляПечати, ТекущееОснование, ДанныеСчетаФактуры)
	
	СуммаВзаиморасчетов = 0;
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

	ВерсияПостановления = УчетНДС.ПолучитьВерсиюПостановления(ДанныеСчетаФактуры.Дата);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущееОснование", 	ТекущееОснование);
	Запрос.УстановитьПараметр("СчетФактура", 		ДанныеСчетаФактуры.Ссылка);
	Запрос.УстановитьПараметр("Контрагент", 		ДанныеСчетаФактуры.Контрагент);
	
	Если ТипЗнч(ТекущееОснование) = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") Тогда
		ДокументОтгрузки = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекущееОснование, "ДокументОтгрузки");
		ВалютаДокументаОснования = ДокументОтгрузки.ВалютаДокумента;
	Иначе
		ВалютаДокументаОснования = ТекущееОснование.ВалютаДокумента;
	КонецЕсли;	
	
	Если ТипЗнч(ТекущееОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		
		Если УчетНДС.ПолучитьУПУпрощенныйУчетНДС(ДанныеСчетаФактуры.Организация, ДанныеСчетаФактуры.Дата) ИЛИ ДанныеСчетаФактуры.Дата >= '20120101' Тогда
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СУММА(ЕСТЬNULL(НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот, 0) + ЕСТЬNULL(НДСЗаписиКнигиПродажОбороты.НДСОборот, 0)) КАК СуммаВзаиморасчетов
			|ПОМЕСТИТЬ ЗаписиКнигиПродаж
			|ИЗ
			|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
			|			,
			|			,
			|			Регистратор,
			|			СчетФактура = &СчетФактура
			|				И Покупатель = &Контрагент) КАК НДСЗаписиКнигиПродажОбороты
			|ГДЕ
			|	НДСЗаписиКнигиПродажОбороты.Регистратор = &ТекущееОснование
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	СУММА(ЕСТЬNULL(НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот, 0) + ЕСТЬNULL(НДСЗаписиКнигиПродажОбороты.НДСОборот, 0))
			|ИЗ
			|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(
			|			,
			|			,
			|			Регистратор,
			|			СчетФактура = &ТекущееОснование
			|				И Покупатель = &Контрагент) КАК НДСЗаписиКнигиПродажОбороты
			|ГДЕ
			|	НДСЗаписиКнигиПродажОбороты.Регистратор = &ТекущееОснование
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ЗаписиКнигиПродаж.СуммаВзаиморасчетов
			|ИЗ
			|	ЗаписиКнигиПродаж КАК ЗаписиКнигиПродаж
			|ГДЕ
			|	НЕ ЗаписиКнигиПродаж.СуммаВзаиморасчетов ЕСТЬ NULL ";
	
		Иначе
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	СУММА(ЕСТЬNULL(НДСНачисленныйОбороты.СуммаБезНДСПриход, 0) + ЕСТЬNULL(НДСНачисленныйОбороты.НДСПриход, 0)) КАК СуммаВзаиморасчетов
			|ПОМЕСТИТЬ ЗаписиКнигиПродаж
			|ИЗ
			|	РегистрНакопления.НДСНачисленный.Обороты(
			|			,
			|			,
			|			Регистратор,
			|			СчетФактура = &СчетФактура
			|				И Покупатель = &Контрагент) КАК НДСНачисленныйОбороты
			|ГДЕ
			|	НДСНачисленныйОбороты.Регистратор = &ТекущееОснование
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	СУММА(ЕСТЬNULL(НДСНачисленныйОбороты.СуммаБезНДСПриход, 0) + ЕСТЬNULL(НДСНачисленныйОбороты.НДСПриход, 0))
			|ИЗ
			|	РегистрНакопления.НДСНачисленный.Обороты(
			|			,
			|			,
			|			Регистратор,
			|			СчетФактура = &ТекущееОснование
			|				И Покупатель = &Контрагент) КАК НДСНачисленныйОбороты
			|ГДЕ
			|	НДСНачисленныйОбороты.Регистратор = &ТекущееОснование
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ЗаписиКнигиПродаж.СуммаВзаиморасчетов
			|ИЗ
			|	ЗаписиКнигиПродаж КАК ЗаписиКнигиПродаж
			|ГДЕ
			|	НЕ ЗаписиКнигиПродаж.СуммаВзаиморасчетов ЕСТЬ NULL ";
			
		КонецЕсли;	
		
	ИначеЕсли УчетНДС.ПолучитьУПУпрощенныйУчетНДС(ДанныеСчетаФактуры.Организация, ДанныеСчетаФактуры.Дата) Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ЕСТЬNULL(НДСЗаписиКнигиПродажОбороты.СуммаБезНДСОборот, 0) + ЕСТЬNULL(НДСЗаписиКнигиПродажОбороты.НДСОборот, 0)) КАК СуммаВзаиморасчетов
		|ИЗ
		|	РегистрНакопления.НДСЗаписиКнигиПродаж.Обороты(, , Регистратор, СчетФактура = &ТекущееОснование) КАК НДСЗаписиКнигиПродажОбороты
		|ГДЕ
		|	НДСЗаписиКнигиПродажОбороты.Регистратор = &ТекущееОснование";
					   
	ИначеЕсли ТипЗнч(ТекущееОснование) = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
		
		РеквизитыДокументаОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущееОснование, "Дата, СчетУчетаРасчетовПоПретензиям");
	
		Запрос.УстановитьПараметр("Дата", 			РеквизитыДокументаОснования.Дата);
		Запрос.УстановитьПараметр("СчетУчетаРасчетовПоПретензиям", 	РеквизитыДокументаОснования.СчетУчетаРасчетовПоПретензиям);
	
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(Хозрасчетный.Сумма), 0) КАК СуммаВзаиморасчетов
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Регистратор = &ТекущееОснование
		|	И Хозрасчетный.СчетДт = &СчетУчетаРасчетовПоПретензиям
		|	И Хозрасчетный.Период = &Дата";
		 
	ИначеЕсли ТипЗнч(ТекущееОснование) = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
						
		ИсходныйДокумент = УчетНДС.ПолучитьИсправляемыйДокументРеализации(ТекущееОснование.ДокументРеализации, Истина);
		
		СтруктураКурсов = МодульВалютногоУчета.ПолучитьКурсВалюты(ИсходныйДокумент.ВалютаДокумента, ИсходныйДокумент.Дата);
		
		СуммаВзаиморасчетов  = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ТекущееОснование.СуммаДокумента,//ИсходныйДокумент.СуммаДокумента,
																				ВалютаДокументаОснования,
																				мВалютаРегламентированногоУчета, 
																				СтруктураКурсов.Курс, 1,
																				СтруктураКурсов.Кратность, 1);
																				
	ИначеЕсли ТипЗнч(ТекущееОснование) = Тип("ДокументСсылка.ОтражениеНачисленияНДС") Тогда
		
		СтруктураКурсов = МодульВалютногоУчета.ПолучитьКурсВалюты(ТекущееОснование.ВалютаДокумента, ТекущееОснование.Дата);
		
		СуммаВзаиморасчетов  = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ТекущееОснование.СуммаДокумента,//ИсходныйДокумент.СуммаДокумента,
																				ВалютаДокументаОснования,
																				мВалютаРегламентированногоУчета, 
																				СтруктураКурсов.Курс, 1,
																				СтруктураКурсов.Кратность, 1);
		
	ИначеЕсли ТекущееОснование.Метаданные().Реквизиты.Найти("СчетУчетаРасчетовСКонтрагентом") <> Неопределено Тогда
		
		РеквизитыДокументаОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекущееОснование, "Дата, СчетУчетаРасчетовСКонтрагентом, СчетРазделУчета");
	
		Запрос.УстановитьПараметр("Дата", 			РеквизитыДокументаОснования.Дата);
		//Запрос.УстановитьПараметр("СчетУчетаРасчетовСКонтрагентом", 	РеквизитыДокументаОснования.СчетУчетаРасчетовСКонтрагентом);
		Если ДанныеСчетаФактуры.Ссылка.СТА_НаЗакупку И ЗначениеЗаполнено(ДанныеСчетаФактуры.Ссылка.Продавец) Тогда
			//Счет расчетов берем из ТЧ Агентские услуги и накладываем условие на равенство поставщику
			СчетРасчетовСПродавцом = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
			Для Каждого Стр ИЗ ТекущееОснование.АгентскиеУслуги Цикл
				Если Стр.Контрагент = ?(ЗначениеЗаполнено(ДанныеСчетаФактуры.Ссылка.Комитент),
					ДанныеСчетаФактуры.Ссылка.Комитент,ДанныеСчетаФактуры.Ссылка.Продавец) И 
					(ДанныеСчетаФактуры.Ссылка.СТА_БезНДС 
					ИЛИ (Не ДанныеСчетаФактуры.Ссылка.СТА_БезНДС И (Стр.СтавкаНДС <> Перечисления.СтавкиНДС.БезНДС))) Тогда
					СчетРасчетовСПродавцом = Стр.СчетРасчетов;
				КонецЕсли;
			КонецЦикла;
			Запрос.УстановитьПараметр("СчетУчетаРасчетовСКонтрагентом", 	СчетРасчетовСПродавцом);
			Запрос.УстановитьПараметр("Продавец",ДанныеСчетаФактуры.Ссылка.Продавец);
		ИначеЕсли ДанныеСчетаФактуры.Ссылка.СТА_НаЗакупку И Не ЗначениеЗаполнено(ДанныеСчетаФактуры.Ссылка.Продавец) Тогда
			//Счет расчетов берем из СчетРазделУчета Реализации
			Запрос.УстановитьПараметр("СчетУчетаРасчетовСКонтрагентом", 	РеквизитыДокументаОснования.СчетРазделУчета);
		Иначе 
			//Запрос.УстановитьПараметр("СчетУчетаРасчетовСКонтрагентом", 	РеквизитыДокументаОснования.СчетУчетаРасчетовСКонтрагентом);
			Запрос.УстановитьПараметр("СчетУчетаРасчетовСКонтрагентом", 	РеквизитыДокументаОснования.СчетРазделУчета);
		КонецЕсли;
		
		Если ДанныеСчетаФактуры.Ссылка.СТА_НаЗакупку И ЗначениеЗаполнено(ДанныеСчетаФактуры.Ссылка.Продавец) Тогда
			Запрос.УстановитьПараметр("Комитент",ДанныеСчетаФактуры.Ссылка.Комитент);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	РеализацияТоваровУслугСФПодрядчики.Подрядчик,
		|	РеализацияТоваровУслугСФПодрядчики.ДоговорПодрядчика,
		|	РеализацияТоваровУслугСФПодрядчики.Продавец
		|ПОМЕСТИТЬ Договора
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.СФПодрядчики КАК РеализацияТоваровУслугСФПодрядчики
		|ГДЕ
		|	РеализацияТоваровУслугСФПодрядчики.Ссылка = &ТекущееОснование
		|	И РеализацияТоваровУслугСФПодрядчики.Подрядчик = "+?(ЗначениеЗаполнено(ДанныеСчетаФактуры.Ссылка.Комитент),"&Комитент","&Продавец")+"
		|	И РеализацияТоваровУслугСФПодрядчики.Продавец = "+?(ЗначениеЗаполнено(ДанныеСчетаФактуры.Ссылка.Комитент),"&Продавец","&Комитент")+"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ХозрасчетныйДвиженияССубконто.Сумма), 0) КАК СуммаВзаиморасчетов
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(&Дата, &Дата, Регистратор = &ТекущееОснование, , ) КАК ХозрасчетныйДвиженияССубконто
		|ГДЕ
		|	ХозрасчетныйДвиженияССубконто.Регистратор = &ТекущееОснование
		|	И ХозрасчетныйДвиженияССубконто.СчетКт = &СчетУчетаРасчетовСКонтрагентом
		|	И ХозрасчетныйДвиженияССубконто.Период = &Дата
		|	И ХозрасчетныйДвиженияССубконто.СчетДт <> &СчетУчетаРасчетовСКонтрагентом
		|	И ХозрасчетныйДвиженияССубконто.СубконтоКт1 = "+?(ЗначениеЗаполнено(ДанныеСчетаФактуры.Ссылка.Комитент),"&Комитент","&Продавец")+"
		|	И ХозрасчетныйДвиженияССубконто.СубконтоКт2 В
		|			(ВЫБРАТЬ
		|				Договора.ДоговорПодрядчика
		|			ИЗ
		|				Договора)";
		Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(Хозрасчетный.Сумма), 0) КАК СуммаВзаиморасчетов
		|ИЗ
		|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Регистратор = &ТекущееОснование  
		|	И Хозрасчетный.СчетДт = &СчетУчетаРасчетовСКонтрагентом
		|	И Хозрасчетный.Период = &Дата";
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
			
	Если ТипЗнч(ТекущееОснование) <> Тип("ДокументСсылка.КорректировкаРеализации")
		И ТипЗнч(ТекущееОснование) <> Тип("ДокументСсылка.ОтражениеНачисленияНДС") Тогда
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда	
			Выборка = Результат.Выбрать();
			Если Выборка.Следующий() Тогда
				СуммаВзаиморасчетов = Выборка.СуммаВзаиморасчетов;
			КонецЕсли;
		КонецЕсли;
		
		Если СуммаВзаиморасчетов = 0 Тогда
			
			СтруктураКурсов = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокументаОснования, ТекущееОснование.Дата);
			
			СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ТекущееОснование.СуммаДокумента,
																					ВалютаДокументаОснования,
																					мВалютаРегламентированногоУчета, 
																					СтруктураКурсов.Курс, 1,
																					СтруктураКурсов.Кратность, 1);
			
		КонецЕсли;
	КонецЕсли;																																					
	
	РасчетСуммыНДСПоСтавке =  УчетНДС.РасчетНДСвРубляхПоСтавкеДокумента(ДанныеДляПечати.Дата);	
	
	Если СуммаВзаиморасчетов <> 0 Тогда
		СтрокиСчетаФактуры = ДанныеДляПечати.ТабличнаяЧасть;
		СтрокиСчетаФактуры.Колонки.Добавить("СуммаБезНДС");
		СуммаВзаиморасчетов = СуммаВзаиморасчетов;
		МассивРаспределения = Новый Массив;
		РегРаспр = Новый Массив;
		Для Каждого СтрокаСчетаФактуры Из СтрокиСчетаФактуры Цикл
			СуммаСНДС = СтрокаСчетаФактуры.Сумма + ?(ДанныеДляПечати.СуммаВключаетНДС, 0, СтрокаСчетаФактуры.СуммаНДС);
			СуммаБезНДС = СуммаСНДС - СтрокаСчетаФактуры.СуммаНДС;

			МассивРаспределения.Добавить(СуммаСНДС);
			РегРаспр.Добавить(СтрокаСчетаФактуры.СТА_СуммаРуб);
			СтрокаСчетаФактуры.СуммаБезНДС = СуммаБезНДС;
			
		КонецЦикла;
		
		СтрокиСчетаФактуры.Колонки.Добавить("СуммаРублевая");
		//УчетНДС.РаспределитьСуммуПоСтолбцу(МассивРаспределения, СуммаВзаиморасчетов, СтрокиСчетаФактуры, "СуммаРублевая");
		РегРаспр = СТАСервер.РаспределитьПропорционально(СуммаВзаиморасчетов,МассивРаспределения,РегРаспр);
		СтрокиСчетаФактуры.ЗагрузитьКолонку(РегРаспр,"СуммаРублевая");
		
		Если ВерсияПостановления = 1 Тогда
			Для Каждого СтрокаСчетаФактуры Из СтрокиСчетаФактуры Цикл
				Если РасчетСуммыНДСПоСтавке Тогда
					
					// Выделение суммы НДС, Расчет суммы без НДС
					ЗначениеСтавкиНДС = УчетНДС.ПолучитьСтавкуНДС(СтрокаСчетаФактуры.СтавкаНДС);
					
					СтрокаСчетаФактуры.СуммаНДС = ?(ЗначениеСтавкиНДС = 0, 0, Окр(СтрокаСчетаФактуры.СуммаРублевая * ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС),2));
					СтрокаСчетаФактуры.Сумма = СтрокаСчетаФактуры.СуммаРублевая - СтрокаСчетаФактуры.СуммаНДС;
					
				Иначе				
					МассивРаспределения.Очистить();
					МассивРаспределения.Добавить(СтрокаСчетаФактуры.СуммаБезНДС);
					МассивРаспределения.Добавить(СтрокаСчетаФактуры.СуммаНДС);
					МассивРаспределенныхСумм = ОбщегоНазначения.РаспределитьПропорционально(СтрокаСчетаФактуры.СуммаРублевая, МассивРаспределения);
					Если МассивРаспределенныхСумм <> Неопределено Тогда
						СтрокаСчетаФактуры.Сумма = МассивРаспределенныхСумм[0];
						СтрокаСчетаФактуры.СуммаНДС = МассивРаспределенныхСумм[1];
					КонецЕсли;
				КонецЕсли;
				
				Если ДанныеДляПечати.СуммаВключаетНДС Тогда
					СтрокаСчетаФактуры.Сумма = СтрокаСчетаФактуры.Сумма+СтрокаСчетаФактуры.СуммаНДС;
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе
			
			СтруктураКурсов = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокументаОснования, ТекущееОснование.Дата);
			
			СуммаДокументаОснования = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ТекущееОснование.СуммаДокумента,
																					ВалютаДокументаОснования,
																					мВалютаРегламентированногоУчета, 
																					СтруктураКурсов.Курс, 1,
																					СтруктураКурсов.Кратность, 1);
																					
//			УчетНДС.РаспределитьСуммуПоСтолбцу(МассивРаспределения, СуммаДокументаОснования, СтрокиСчетаФактуры, "СуммаРублевая");																		
			Для Каждого СтрокаСчетаФактуры Из СтрокиСчетаФактуры Цикл																		
					ЗначениеСтавкиНДС = УчетНДС.ПолучитьСтавкуНДС(СтрокаСчетаФактуры.СтавкаНДС);
					
					СтрокаСчетаФактуры.СуммаНДС = ?(ЗначениеСтавкиНДС = 0, 0, Окр(СтрокаСчетаФактуры.СуммаРублевая * ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС),2));
					СтрокаСчетаФактуры.СуммаБезНДС = СтрокаСчетаФактуры.СуммаРублевая - СтрокаСчетаФактуры.СуммаНДС;
			КонецЦикла;
																					
			НДСКРаспределению    = 0;
			БезНДСКРаспределению = 0;
			СуммаСНДСКРаспределению = СуммаВзаиморасчетов;
			
			Если Не СтрокиСчетаФактуры.Итог("СуммаНДС") = 0 тогда
				НДСКРаспределению = Окр(СуммаСНДСКРаспределению * СтрокиСчетаФактуры.Итог("СуммаНДС") / СтрокиСчетаФактуры.Итог("СуммаРублевая"), 2);
			КонецЕсли;
			
			БезНДСКРаспределению = СуммаСНДСКРаспределению - НДСКРаспределению;
			
			Если НЕ БезНДСКРаспределению = 0 тогда
				НовыеСуммы = ОбщегоНазначения.РаспределитьПропорционально(БезНДСКРаспределению,СтрокиСчетаФактуры.ВыгрузитьКолонку("СуммаБезНДС"));
				СтрокиСчетаФактуры.ЗагрузитьКолонку(НовыеСуммы,"СуммаБезНДС");
			КонецЕсли;
			
			Если НЕ НДСКРаспределению = 0 тогда
				НовыеСуммы = ОбщегоНазначения.РаспределитьПропорционально(НДСКРаспределению,СтрокиСчетаФактуры.ВыгрузитьКолонку("СуммаНДС"));
				СтрокиСчетаФактуры.ЗагрузитьКолонку(НовыеСуммы,"СуммаНДС");
			КонецЕсли;
			
			Для Каждого СтрокаСчетаФактуры Из СтрокиСчетаФактуры Цикл
				Если ДанныеДляПечати.СуммаВключаетНДС Тогда
					СтрокаСчетаФактуры.Сумма = СтрокаСчетаФактуры.СуммаБезНДС+СтрокаСчетаФактуры.СуммаНДС;
				Иначе
					СтрокаСчетаФактуры.Сумма = СтрокаСчетаФактуры.СуммаБезНДС;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		СтрокиСчетаФактуры.Колонки.Удалить(СтрокиСчетаФактуры.Колонки.СуммаБезНДС);
		СтрокиСчетаФактуры.ЗаполнитьЗначения(0, "Цена");
	КонецЕсли;	
	
КонецПроцедуры


Функция СобратьДанныеДляПечатиСчетаФактуры(ТекущееОснование, ДанныеСчетаФактуры)
	
	ТипОснования = ТипЗнч(ТекущееОснование);
	ДанныеДляПечати = Неопределено;
	
	Если НЕ ДанныеСчетаФактуры.Свойство("ВидСчетаФактуры") Тогда
		ДанныеСчетаФактуры.Вставить("ВидСчетаФактуры", Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию);
	КонецЕсли;
	Если НЕ ДанныеСчетаФактуры.Свойство("Исправление") Тогда
		ДанныеСчетаФактуры.Вставить("Исправление", Ложь);
	КонецЕсли;
	Если НЕ ДанныеСчетаФактуры.Свойство("НомерИсправления") Тогда
		ДанныеСчетаФактуры.Вставить("НомерИсправления", 0);
	КонецЕсли;
	Если НЕ ДанныеСчетаФактуры.Свойство("НомерПлатежноРасчетногоДокумента") Тогда
		ДанныеСчетаФактуры.Вставить("НомерПлатежноРасчетногоДокумента", "");
	КонецЕсли;
	Если НЕ ДанныеСчетаФактуры.Свойство("ДатаПлатежноРасчетногоДокумента") Тогда
		ДанныеСчетаФактуры.Вставить("ДатаПлатежноРасчетногоДокумента", "");
	КонецЕсли;
	Если НЕ ДанныеСчетаФактуры.Свойство("ДоговорКонтрагента") Тогда
		ДанныеСчетаФактуры.Вставить("ДоговорКонтрагента", Неопределено);
	КонецЕсли;
	Если НЕ ДанныеСчетаФактуры.Свойство("ДокументОснование") Тогда
		ДанныеСчетаФактуры.Вставить("ДокументОснование", ТекущееОснование);
	КонецЕсли;
	
	//Если ДанныеСчетаФактуры.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс 
	//	ИЛИ ДанныеСчетаФактуры.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитента
	//	ИЛИ ДанныеСчетаФактуры.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАвансКомитентаНаЗакупку
	//	ИЛИ ДанныеСчетаФактуры.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаСуммовуюРазницу Тогда
	//	ДанныеДляПечати    = СобратьДанныеСФнаАвансИСуммовуюРазницу(ТекущееОснование, ДанныеСчетаФактуры);
	//ИначеЕсли ДанныеСчетаФактуры.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НалоговыйАгент Тогда
	//	ДанныеДляПечати    = СобратьДанныеСФНалоговыйАгент(ТекущееОснование, ДанныеСчетаФактуры);
	//ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетКомитентуОПродажах") Тогда
	//	ДанныеДляПечати    = СобратьДанныеПоОтчетКомитенту(ТекущееОснование, ДанныеСчетаФактуры);
	//Иначе
	Если ТипОснования = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ДанныеДляПечати    = СобратьДанныеПоРеализацияТоваровУслуг(ТекущееОснование, ДанныеСчетаФактуры);
	//ИначеЕсли ТипОснования = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") И ТипЗнч(ТекущееОснование.ДокументОтгрузки) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
	//	ДанныеДляПечати    = СобратьДанныеПоРеализацияТоваровУслуг(ТекущееОснование, ДанныеСчетаФактуры);
	//ИначеЕсли ТипОснования = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") И ТипЗнч(ТекущееОснование.ДокументОтгрузки) = Тип("ДокументСсылка.ПередачаОС") Тогда
	//	ДанныеДляПечати    = СобратьДанныеПоПередачеОС(ТекущееОснование.ДокументОтгрузки, ДанныеСчетаФактуры);
	//ИначеЕсли ТипОснования = Тип("ДокументСсылка.ВозвратТоваровПоставщику") Тогда
	//	ДанныеДляПечати    = СобратьДанныеПоВозвратТоваровПоставщику(ТекущееОснование, ДанныеСчетаФактуры);
	//ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
	//	ДанныеДляПечати    = СобратьДанныеПоОтчетКомиссионераОПродажах(ТекущееОснование, ДанныеСчетаФактуры);
	//ИначеЕсли ТипОснования = Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг") Тогда
	//	ДанныеДляПечати    = СобратьДанныеПоАкту(ТекущееОснование, ДанныеСчетаФактуры);
	//ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПередачаОС") Тогда
	//	ДанныеДляПечати    = СобратьДанныеПоПередачеОС(ТекущееОснование, ДанныеСчетаФактуры);
	//ИначеЕсли ТипОснования = Тип("ДокументСсылка.ПередачаНМА") Тогда
	//	ДанныеДляПечати    = СобратьДанныеПоПередачеНМАОрганизаций(ТекущееОснование, ДанныеСчетаФактуры);
	//ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОтражениеНачисленияНДС") Тогда
	//	ДанныеДляПечати    = СобратьДанныеПоОтражениеНачисленияНДС(ТекущееОснование, ДанныеСчетаФактуры);
	//ИначеЕсли ТипОснования = Тип("ДокументСсылка.РеализацияУслугПоПереработке") Тогда
	//	ДанныеДляПечати    = СобратьДанныеПоРеализацияУслугПоПереработке(ТекущееОснование, ДанныеСчетаФактуры);
	//ИначеЕсли ТипОснования = Тип("ДокументСсылка.НачислениеНДСпоСМРхозспособом") Тогда
	//	ДанныеДляПечати    = СобратьДанныеПоНачислениеНДСпоСМРхозспособом(ТекущееОснование, ДанныеСчетаФактуры);
	//ИначеЕсли ТипОснования = Тип("ДокументСсылка.ОказаниеУслуг") Тогда
	//	ДанныеДляПечати    = СобратьДанныеПоОказаниюУслуг(ТекущееОснование, ДанныеСчетаФактуры, "Контрагенты");
	//ИначеЕсли ТипОснования = Тип("ДокументСсылка.КорректировкаРеализации") Тогда
	//	ДанныеДляПечати = ПолучитьДанныеДляПечатиИсправленияСчетаФактуры(ТекущееОснование, ДанныеСчетаФактуры);
	КонецЕсли;
	
	Если ДанныеДляПечати = Неопределено Тогда
		Возврат ДанныеДляПечати;
	КонецЕсли;
	
	ДанныеДляПечати.Вставить("ДокументОснование",  ДанныеСчетаФактуры.ДокументОснование);
	ДанныеДляПечати.Вставить("Ссылка",             ДанныеСчетаФактуры.Ссылка);
	ДанныеДляПечати.Вставить("ВидСчетаФактуры",    ДанныеСчетаФактуры.ВидСчетаФактуры);
	ДанныеДляПечати.Вставить("Исправление",        ДанныеСчетаФактуры.Исправление);
	ДанныеДляПечати.Вставить("НомерИсправления",   ДанныеСчетаФактуры.НомерИсправления);
	ДанныеДляПечати.Вставить("ДатаСчетФактуры",    ДанныеСчетаФактуры.Дата);
	ДанныеДляПечати.Вставить("ДоговорКонтрагента", ДанныеСчетаФактуры.ДоговорКонтрагента);
	
	Если ДанныеСчетаФактуры.Свойство("СчетФактураБезНДС") Тогда
		ДанныеДляПечати.Вставить("СчетФактураБезНДС", ДанныеСчетаФактуры.СчетФактураБезНДС);
	ИначеЕсли НЕ ДанныеДляПечати.Свойство("СчетФактураБезНДС") Тогда
		ДанныеДляПечати.Вставить("СчетФактураБезНДС", Ложь);
	КонецЕсли;
	
	Возврат ДанныеДляПечати;
	
КонецФункции

Функция СобратьДанныеПоРеализацияТоваровУслуг(ТекущееОснование, ДанныеСчетаФактуры)
	Перем ПодразделениеОтветственныхЛиц;

	Запрос = Новый Запрос;
	Если ТипЗнч(ТекущееОснование) = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") Тогда
		Запрос.УстановитьПараметр("ДокументОснование", ТекущееОснование.ДокументОтгрузки);
	Иначе
		Запрос.УстановитьПараметр("ДокументОснование", ТекущееОснование);
	КонецЕсли;
	Запрос.УстановитьПараметр("ПустойКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
	
	Запрос.УстановитьПараметр("Поставщик",ДанныеСчетаФактуры.Ссылка.Продавец);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Организация,
	|	Выбор Когда &Поставщик = Значение(Справочник.Контрагенты.ПустаяСсылка) Тогда РеализацияТоваровУслуг.Организация Иначе &Поставщик Конец КАК Поставщик,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РеализацияТоваровУслуг.Грузоотправитель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА ""он же""
	|		ИНАЧЕ РеализацияТоваровУслуг.Грузоотправитель
	|	КОНЕЦ КАК Грузоотправитель,
	|	РеализацияТоваровУслуг.Контрагент КАК Покупатель,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(РеализацияТоваровУслуг.Грузополучатель, &ПустойКонтрагент) = &ПустойКонтрагент
	|			ТОГДА РеализацияТоваровУслуг.Контрагент
	|		ИНАЧЕ РеализацияТоваровУслуг.Грузополучатель
	|	КОНЕЦ КАК Грузополучатель,
	|	РеализацияТоваровУслуг.Склад,
	|	РеализацияТоваровУслуг.СуммаДокумента КАК Сумма,
	|	РеализацияТоваровУслуг.ВалютаДокумента КАК Валюта,
	|	РеализацияТоваровУслуг.УчитыватьНДС КАК УчитыватьНДС,
	|	РеализацияТоваровУслуг.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	РеализацияТоваровУслуг.АдресДоставки КАК АдресДоставки,
	|	РеализацияТоваровУслуг.Руководитель КАК Руководитель,
	|	РеализацияТоваровУслуг.ЗаРуководителяПоПриказу КАК ЗаРуководителяПоПриказу,
	|	РеализацияТоваровУслуг.ОтпускПроизвел КАК ОтпускПроизвел
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Ссылка = &ДокументОснование";
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	
	Запрос = Новый Запрос;
	Если ТипЗнч(ТекущееОснование) = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") Тогда
		Запрос.УстановитьПараметр("ДокументОснование", ТекущееОснование.ДокументОтгрузки);
	Иначе
		Запрос.УстановитьПараметр("ДокументОснование", ТекущееОснование);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеСчетаФактуры.Продавец) Тогда
		Запрос.Текст = Запрос.Текст +
		"ВЫБРАТЬ
		|	РеализацияТоваровУслугСФПодрядчики.Подрядчик,
		|	РеализацияТоваровУслугСФПодрядчики.ДоговорПодрядчика,
		|	РеализацияТоваровУслугСФПодрядчики.Продавец
		|ПОМЕСТИТЬ Договора
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.СФПодрядчики КАК РеализацияТоваровУслугСФПодрядчики
		|ГДЕ
		|	РеализацияТоваровУслугСФПодрядчики.Подрядчик = &Продавец
		|	И РеализацияТоваровУслугСФПодрядчики.Продавец = &Комитент
		|	И РеализацияТоваровУслугСФПодрядчики.Ссылка = &ДокументОснование
		|	;
		|";
		Если ЗначениеЗаполнено(ДанныеСчетаФактуры.Ссылка.Комитент) Тогда
			Запрос.УстановитьПараметр("Комитент",ДанныеСчетаФактуры.Ссылка.Продавец);
			Запрос.УстановитьПараметр("Продавец",ДанныеСчетаФактуры.Ссылка.Комитент);		
		Иначе
			Запрос.УстановитьПараметр("Продавец",ДанныеСчетаФактуры.Ссылка.Продавец);
			Запрос.УстановитьПараметр("Комитент",ДанныеСчетаФактуры.Ссылка.Комитент);
		КонецЕсли;
	Иначе
		Запрос.УстановитьПараметр("Продавец",ДанныеСчетаФактуры.Ссылка.Продавец);
		Запрос.УстановитьПараметр("Комитент",ДанныеСчетаФактуры.Ссылка.Комитент);
	КонецЕсли;
		
	Запрос.Текст = Запрос.Текст +  
	"ВЫБРАТЬ
	|	РеализацияТоваровУслугТовары.Номенклатура КАК Товар,
	|	ВЫРАЗИТЬ(РеализацияТоваровУслугТовары.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
	|	РеализацияТоваровУслугТовары.Номенклатура.Код КАК ТоварКод,
	|	РеализацияТоваровУслугТовары.Номенклатура.Артикул КАК ТоварАртикул,
	|	РеализацияТоваровУслугТовары.СтранаПроисхождения КАК СтранаПроисхождения,
	|	РеализацияТоваровУслугТовары.СтранаПроисхождения.НаименованиеПолное КАК ПредставлениеСтраны,
	|	РеализацияТоваровУслугТовары.СтранаПроисхождения.Код КАК СтранаПроисхожденияКод,
	|	РеализацияТоваровУслугТовары.Номенклатура.БазоваяЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|	РеализацияТоваровУслугТовары.Номенклатура.БазоваяЕдиницаИзмерения.Код КАК ЕдиницаИзмеренияКод,
	|	РеализацияТоваровУслугТовары.НомерГТД КАК НомерГТД,
	|	РеализацияТоваровУслугТовары.НомерГТД.Представление КАК ПредставлениеГТД,
	|	РеализацияТоваровУслугТовары.Количество КАК Количество,
	|	РеализацияТоваровУслугТовары.Цена КАК Цена,
	|	РеализацияТоваровУслугТовары.СтавкаНДС КАК СтавкаНДС,
	|	РеализацияТоваровУслугТовары.СуммаНДС КАК СуммаНДС,
	|	РеализацияТоваровУслугТовары.Сумма КАК Сумма,
	|	0 КАК СТА_СуммаРуб,
	|	0 КАК СТА_СуммаНДСРуб,
	|	РеализацияТоваровУслугТовары.НомерСтроки КАК НомерСтроки,
	|	ВЫБОР
	|		КОГДА РеализацияТоваровУслугТовары.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЕстьНДС,
	|	Значение(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
	|	Значение(Справочник.ДоговорыКонтрагентов.ПустаяСсылка) КАК ДоговорКонтрагента,
	|	""Товары"" КАК ВидПоступления
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	|	РеализацияТоваровУслугТовары.Ссылка = &ДокументОснование";
	Если ДанныеСчетаФактуры.Ссылка.СТА_НаЗакупку Тогда
		Запрос.Текст = Запрос.Текст + "
	|	И Ложь";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|";
	Если Не (ТипЗнч(ТекущееОснование) = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров") Или
		   ТекущееОснование.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности) Тогда
		Запрос.Текст = Запрос.Текст + 
		"ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РеализацияТоваровУслугУслуги.Номенклатура,
		|	ВЫРАЗИТЬ(РеализацияТоваровУслугУслуги.Содержание КАК СТРОКА(1000)),
		|	РеализацияТоваровУслугУслуги.Номенклатура.Код,
		|	РеализацияТоваровУслугУслуги.Номенклатура.Артикул,
		|	NULL,
		|	"""",
		|	"""",
		|	РеализацияТоваровУслугУслуги.Номенклатура.БазоваяЕдиницаИзмерения.Представление,
		|	РеализацияТоваровУслугУслуги.Номенклатура.БазоваяЕдиницаИзмерения.Код,
		|	NULL,
		|	"""",
		|	РеализацияТоваровУслугУслуги.Количество,
		|	РеализацияТоваровУслугУслуги.Цена,
		|	РеализацияТоваровУслугУслуги.СтавкаНДС,
		|	РеализацияТоваровУслугУслуги.СуммаНДС,
		|	РеализацияТоваровУслугУслуги.Сумма,
		|	РеализацияТоваровУслугУслуги.СТА_СуммаРуб,
		|	РеализацияТоваровУслугУслуги.СТА_СуммаНДСРуб,
		|	РеализацияТоваровУслугУслуги.НомерСтроки,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугУслуги.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ЕстьНДС,
		|	Значение(Справочник.Контрагенты.ПустаяСсылка),
		|	Значение(Справочник.ДоговорыКонтрагентов.ПустаяСсылка),
		|	""Услуги""
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Услуги КАК РеализацияТоваровУслугУслуги
		|ГДЕ
		|	РеализацияТоваровУслугУслуги.Ссылка = &ДокументОснование";
		Если ДанныеСчетаФактуры.Ссылка.СТА_НаЗакупку И ЗначениеЗаполнено(ДанныеСчетаФактуры.Продавец) Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И Ложь";
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РеализацияТоваровУслугАгентскиеУслуги.Номенклатура,
		|	ВЫРАЗИТЬ(РеализацияТоваровУслугАгентскиеУслуги.Содержание КАК СТРОКА(1000)),
		|	РеализацияТоваровУслугАгентскиеУслуги.Номенклатура.Код,
		|	РеализацияТоваровУслугАгентскиеУслуги.Номенклатура.Артикул,
		|	NULL,
		|	"""",
		|	"""",
		|	РеализацияТоваровУслугАгентскиеУслуги.Номенклатура.БазоваяЕдиницаИзмерения.Представление,
		|	РеализацияТоваровУслугАгентскиеУслуги.Номенклатура.БазоваяЕдиницаИзмерения.Код,
		|	NULL,
		|	"""",
		|	РеализацияТоваровУслугАгентскиеУслуги.Количество,
		|	РеализацияТоваровУслугАгентскиеУслуги.Цена,
		|	РеализацияТоваровУслугАгентскиеУслуги.СтавкаНДС,
		|	РеализацияТоваровУслугАгентскиеУслуги.СуммаНДС,
		|	РеализацияТоваровУслугАгентскиеУслуги.Сумма,
		|	РеализацияТоваровУслугАгентскиеУслуги.СТА_СуммаРуб,
		|	РеализацияТоваровУслугАгентскиеУслуги.СТА_СуммаНДСРуб,
		|	РеализацияТоваровУслугАгентскиеУслуги.НомерСтроки,
		|	ВЫБОР
		|		КОГДА РеализацияТоваровУслугАгентскиеУслуги.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
		|			ТОГДА 0
		|		ИНАЧЕ 1
		|	КОНЕЦ КАК ЕстьНДС,
		|	РеализацияТоваровУслугАгентскиеУслуги.Контрагент,
		|	РеализацияТоваровУслугАгентскиеУслуги.ДоговорКонтрагента,
		|	""АгентскиеУслуги""
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.АгентскиеУслуги КАК РеализацияТоваровУслугАгентскиеУслуги"
		+?(ЗначениеЗаполнено(ДанныеСчетаФактуры.Продавец),"
		|	ЛЕВОЕ СОЕДИНЕНИЕ Договора КАК Договора
		|	ПО РеализацияТоваровУслугАгентскиеУслуги.Контрагент = Договора.Подрядчик
		|	И РеализацияТоваровУслугАгентскиеУслуги.ДоговорКонтрагента = Договора.ДоговорПодрядчика","")+"
		|ГДЕ
		|	РеализацияТоваровУслугАгентскиеУслуги.Ссылка = &ДокументОснование";
		Если ДанныеСчетаФактуры.Ссылка.СТА_НаЗакупку Тогда//И ЗначениеЗаполнено(ДанныеСчетаФактуры.Продавец) Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И РеализацияТоваровУслугАгентскиеУслуги.Контрагент = &Продавец
			|	И Выбор Когда &БезНДС Тогда Истина Иначе РеализацияТоваровУслугАгентскиеУслуги.СтавкаНДС <> Значение(Перечисление.СтавкиНДС.БезНДС) Конец"
			+?(ЗначениеЗаполнено(ДанныеСчетаФактуры.Продавец),"
			|	И Не Договора.Подрядчик ЕСТЬ NULL","");
			//Запрос.УстановитьПараметр("Продавец",ДанныеСчетаФактуры.Продавец);
			Запрос.УстановитьПараметр("БезНДС",ДанныеСчетаФактуры.Ссылка.СТА_БезНДС);
		КонецЕсли;
		Запрос.Текст = Запрос.Текст + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	ВидПоступления,
		|	НомерСтроки";
	Иначе 
		Запрос.Текст = Запрос.Текст + 
		"УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
	КонецЕсли;
	
	ВыборкаСтрокТовары = Запрос.Выполнить().Выбрать();

	////Добавлено для возможности расчета сумм в счет-фактуре
	//Если ДанныеСчетаФактуры.Ссылка.СТА_НаЗакупку И ЗначениеЗаполнено(ДанныеСчетаФактуры.Продавец) Тогда 
	//	ЗапросПоПодрядчику = Новый Запрос;
	//	ЗапросПоПодрядчику.Текст =
	//	"ВЫБРАТЬ
	//	|	МАКСИМУМ(РеализацияТоваровУслугСФПеревыставленные.Подрядчик) КАК Подрядчик,
	//	|	МАКСИМУМ(РеализацияТоваровУслугСФПеревыставленные.Продавец) КАК Продавец,
	//	|	РеализацияТоваровУслугСФПеревыставленные.СФВыданная
	//	|ПОМЕСТИТЬ ПодрядчикПродавец
	//	|ИЗ
	//	|	Документ.РеализацияТоваровУслуг.СФПеревыставленные КАК РеализацияТоваровУслугСФПеревыставленные
	//	|ГДЕ
	//	|	РеализацияТоваровУслугСФПеревыставленные.Ссылка = &Ссылка
	//	|	И РеализацияТоваровУслугСФПеревыставленные.СФВыданная = &СФВыданная
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	РеализацияТоваровУслугСФПеревыставленные.СФВыданная
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	РеализацияТоваровУслугСФПодрядчики.Подрядчик,
	//	|	РеализацияТоваровУслугСФПодрядчики.ДоговорПодрядчика,
	//	|	РеализацияТоваровУслугСФПодрядчики.Продавец,
	//	|	СУММА(РеализацияТоваровУслугСФПодрядчики.Сумма) КАК Сумма,
	//	|	СУММА(РеализацияТоваровУслугСФПодрядчики.СуммаНДС) КАК СуммаНДС
	//	|ПОМЕСТИТЬ ПоСФ
	//	|ИЗ
	//	|	Документ.РеализацияТоваровУслуг.СФПодрядчики КАК РеализацияТоваровУслугСФПодрядчики
	//	|ГДЕ
	//	|	РеализацияТоваровУслугСФПодрядчики.Ссылка = &Ссылка
	//	|	И РеализацияТоваровУслугСФПодрядчики.Подрядчик В
	//	|			(ВЫБРАТЬ
	//	|				ПодрядчикПродавец.Подрядчик
	//	|			ИЗ
	//	|				ПодрядчикПродавец)
	//	|	И РеализацияТоваровУслугСФПодрядчики.Продавец В
	//	|			(ВЫБРАТЬ
	//	|				ПодрядчикПродавец.Продавец
	//	|			ИЗ
	//	|				ПодрядчикПродавец)
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	РеализацияТоваровУслугСФПодрядчики.Подрядчик,
	//	|	РеализацияТоваровУслугСФПодрядчики.ДоговорПодрядчика,
	//	|	РеализацияТоваровУслугСФПодрядчики.Продавец
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	РеализацияТоваровУслугАгентскиеУслуги.Контрагент,
	//	|	РеализацияТоваровУслугАгентскиеУслуги.ДоговорКонтрагента,
	//	|	СУММА(РеализацияТоваровУслугАгентскиеУслуги.Сумма) КАК Сумма,
	//	|	СУММА(РеализацияТоваровУслугАгентскиеУслуги.СуммаНДС) КАК СуммаНДС
	//	|ПОМЕСТИТЬ ПоАгентскимУслугам
	//	|ИЗ
	//	|	Документ.РеализацияТоваровУслуг.АгентскиеУслуги КАК РеализацияТоваровУслугАгентскиеУслуги
	//	|ГДЕ
	//	|	РеализацияТоваровУслугАгентскиеУслуги.Ссылка = &Ссылка
	//	|	И РеализацияТоваровУслугАгентскиеУслуги.Контрагент = &Подрядчик
	//	|	И РеализацияТоваровУслугАгентскиеУслуги.СтавкаНДС <> Значение(Перечисление.СтавкиНДС.БезНДС)
	//	|
	//	|СГРУППИРОВАТЬ ПО
	//	|	РеализацияТоваровУслугАгентскиеУслуги.Контрагент,
	//	|	РеализацияТоваровУслугАгентскиеУслуги.ДоговорКонтрагента
	//	|;
	//	|
	//	|////////////////////////////////////////////////////////////////////////////////
	//	|ВЫБРАТЬ
	//	|	ПоСФ.Подрядчик,
	//	|	ПоСФ.ДоговорПодрядчика,
	//	|	ПоСФ.Продавец,
	//	|	ПоСФ.Сумма КАК СуммаПоСФ,
	//	|	ПоСФ.СуммаНДС КАК СуммаНДСПоСФ,
	//	|	ЕСТЬNULL(ПоАгентскимУслугам.Сумма, 0) КАК СуммаПоУслугам,
	//	|	ЕСТЬNULL(ПоАгентскимУслугам.СуммаНДС, 0) КАК СуммаНДСПоУслугам
	//	|ИЗ
	//	|	ПоСФ КАК ПоСФ
	//	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоАгентскимУслугам КАК ПоАгентскимУслугам
	//	|		ПО ПоСФ.Подрядчик = ПоАгентскимУслугам.Контрагент
	//	|			И ПоСФ.ДоговорПодрядчика = ПоАгентскимУслугам.ДоговорКонтрагента";
	//	ЗапросПоПодрядчику.УстановитьПараметр("Ссылка",ТекущееОснование);
	//	ЗапросПоПодрядчику.УстановитьПараметр("СФВыданная",ДанныеСчетаФактуры.Ссылка);
	//	ЗапросПоПодрядчику.УстановитьПараметр("Подрядчик",ДанныеСчетаФактуры.Продавец);
	//	ТЗ = ЗапросПоПодрядчику.Выполнить().Выгрузить();
	//КонецЕсли;
	////Окончание добавления
	
	ДанныеДляПечати = Новый Структура();
	
	Поставщик = Шапка.Поставщик;
	Грузоотправитель = Шапка.Грузоотправитель;
	ДанныеДляПечати.Вставить("Организация",      Шапка.Организация);
	ДанныеДляПечати.Вставить("Номер",            ДанныеСчетаФактуры.Номер);
	ДанныеДляПечати.Вставить("Дата",             ДанныеСчетаФактуры.Дата);
	ДанныеДляПечати.Вставить("НомерПРД",         "");
	ДанныеДляПечати.Вставить("ДатаПРД",          "");
	ДанныеДляПечати.Вставить("Поставщик",        Поставщик);
	ДанныеДляПечати.Вставить("Грузоотправитель", Грузоотправитель);
	ДанныеДляПечати.Вставить("Покупатель",       Шапка.Покупатель);
	ДанныеДляПечати.Вставить("Грузополучатель",  Шапка.Грузополучатель);
	ДанныеДляПечати.Вставить("АдресДоставки",    Шапка.АдресДоставки);
	Если ДанныеСчетаФактуры.Ссылка.СТА_НаЗакупку Тогда		
		ДанныеДляПечати.Вставить("Сумма",            ДанныеСчетаФактуры.Ссылка.СуммаДокумента);
	Иначе
		ДанныеДляПечати.Вставить("Сумма",            Шапка.Сумма);
	КонецЕсли;
	ДанныеДляПечати.Вставить("Валюта",           Шапка.Валюта);
	ДанныеДляПечати.Вставить("УчитыватьНДС",     Шапка.УчитыватьНДС);
	ДанныеДляПечати.Вставить("СуммаВключаетНДС", Шапка.СуммаВключаетНДС);

	Руководители = ОбщегоНазначения.ОтветственныеЛица(Шапка.Организация, ДанныеСчетаФактуры.Дата, ПодразделениеОтветственныхЛиц);
	ДанныеДляПечати.Вставить(?(РегламентированнаяОтчетность.ЭтоПБОЮЛ(Шапка.Поставщик), "ФИОПБОЮЛ", "ФИОРуководителя"), Руководители.РуководительПредставление);
	ДанныеДляПечати.Вставить("ФИОГлавногоБухгалтера", Руководители.ГлавныйБухгалтерПредставление);

	Товары = СоздатьТаблицуДляЗаполнениеТабличнойЧастиДанныхПечати();
	
	ЕстьТовары = Ложь;
	ЕстьУслуги = Ложь;
	СчетФактураБезНДС = (ВыборкаСтрокТовары.Количество() > 0);

	Пока ВыборкаСтрокТовары.Следующий() = 1 Цикл

		ЕстьТовары = ЕстьТовары ИЛИ (ВыборкаСтрокТовары.ВидПоступления = "Товары");
		ЕстьУслуги = ЕстьУслуги ИЛИ (ВыборкаСтрокТовары.ВидПоступления = "Услуги") ИЛИ (ВыборкаСтрокТовары.ВидПоступления = "АгентскиеУслуги");
		СчетФактураБезНДС = СчетФактураБезНДС И (ВыборкаСтрокТовары.ЕстьНДС = 0); 
				
		//Если ДанныеСчетаФактуры.Ссылка.СТА_НаЗакупку И ЗначениеЗаполнено(ДанныеСчетаФактуры.Продавец) Тогда 
		//	Отбор = Новый Структура;
		//	Отбор.Вставить("Подрядчик",ВыборкаСтрокТовары.Контрагент);
		//	Отбор.Вставить("ДоговорПодрядчика",ВыборкаСтрокТовары.ДоговорКонтрагента);
		//	СтрокиТЗ = ТЗ.НайтиСтроки(Отбор);
		//Иначе
		//	СтрокиТЗ = Новый ТаблицаЗначений;
		//	СтрокиТЗ.Колонки.Добавить("СуммаПоСФ");
		//	НоваяСтр = СтрокиТЗ.Добавить();
		//	НоваяСтр.СуммаПоСФ = 0;
		//КонецЕсли;
		//Если СтрокиТЗ.Количество()=1 ИЛИ ВыборкаСтрокТовары.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
		
		Строчка = Товары.Добавить();
		Строчка.Товар                  = ВыборкаСтрокТовары.Товар;
		Строчка.ТоварНаименование      = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование);
		Строчка.ТоварКод               = ВыборкаСтрокТовары.ТоварКод;
		Строчка.ТоварАртикул           = ВыборкаСтрокТовары.ТоварАртикул;
		Строчка.СтранаПроисхождения    = ВыборкаСтрокТовары.СтранаПроисхождения;
		Строчка.ПредставлениеСтраны    = ?(НЕ ЗначениеЗаполнено(ВыборкаСтрокТовары.ПредставлениеСтраны), 
												ВыборкаСтрокТовары.СтранаПроисхождения, ВыборкаСтрокТовары.ПредставлениеСтраны);
		Строчка.СтранаПроисхожденияКод = ВыборкаСтрокТовары.СтранаПроисхожденияКод;
		Строчка.НомерГТД               = ВыборкаСтрокТовары.НомерГТД;
		Строчка.ПредставлениеГТД       = ВыборкаСтрокТовары.ПредставлениеГТД;
		Строчка.Количество             = ВыборкаСтрокТовары.Количество;
		Строчка.ЕдиницаИзмерения       = ВыборкаСтрокТовары.ЕдиницаИзмерения;
		Строчка.ЕдиницаИзмеренияКод    = ВыборкаСтрокТовары.ЕдиницаИзмеренияКод;
		Строчка.Цена                   = ВыборкаСтрокТовары.Цена;
		Строчка.СтавкаНДС              = ВыборкаСтрокТовары.СтавкаНДС;
		//Если СтрокиТЗ.Количество()=1 И СтрокиТЗ[0].СуммаПоСФ <> 0 Тогда
		//	Строчка.СуммаНДС = ВыборкаСтрокТовары.СуммаНДС *?(СтрокиТЗ[0].СуммаНДСПоУслугам=0,1,СтрокиТЗ[0].СуммаНДСПоСФ/СтрокиТЗ[0].СуммаНДСПоУслугам);
		//	Строчка.Сумма = ВыборкаСтрокТовары.Сумма *?(СтрокиТЗ[0].СуммаПоУслугам=0,1,СтрокиТЗ[0].СуммаПоСФ/СтрокиТЗ[0].СуммаПоУслугам);
		//Иначе
			Строчка.СуммаНДС               = ВыборкаСтрокТовары.СуммаНДС;
			Строчка.Сумма                  = ВыборкаСтрокТовары.Сумма;
			
			Строчка.СТА_СуммаРуб           = ВыборкаСтрокТовары.СТА_СуммаРуб;
			Строчка.СТА_СуммаНДСРуб        = ВыборкаСтрокТовары.СТА_СуммаНДСРуб;
		//КонецЕсли;
		//КонецЕсли;
	КонецЦикла;
	
	ДанныеДляПечати.Вставить("ТабличнаяЧасть", 		Товары);
	ДанныеДляПечати.Вставить("СчетФактураБезНДС", 	СчетФактураБезНДС);
	
	// Параметры для универсального передаточного документа
	Если ЗначениеЗаполнено(Шапка.ОтпускПроизвел) Тогда
		ДанныеДляПечати.Вставить("ФИОКладовщика", ОбщегоНазначения.ФамилияИнициалыФизЛица(Шапка.ОтпускПроизвел));
		ДанныеПодотчетногоЛица = ОбщегоНазначения.ДанныеФизЛица(Шапка.Организация, Шапка.ОтпускПроизвел, ДанныеСчетаФактуры.Дата);
		Если ЗначениеЗаполнено(ДанныеПодотчетногоЛица.Должность) Тогда 
			ДанныеДляПечати.Вставить("ДолжностьКладовщика", "" + ДанныеПодотчетногоЛица.Должность);
		Иначе
			ДанныеДляПечати.Вставить("ДолжностьКладовщика", "");
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(Шапка.Склад) И ЕстьТовары Тогда
		Срез = РегистрыСведений.ОтветственныеЛица.СрезПоследних(ДанныеСчетаФактуры.Дата, Новый Структура("СтруктурнаяЕдиница", Шапка.Склад));
		Если Срез.Количество() > 0 Тогда
			ДанныеПодотчетногоЛица = ОбщегоНазначения.ДанныеФизЛица(Шапка.Организация, Срез[0].ФизическоеЛицо, ДанныеСчетаФактуры.Дата);
			ДанныеДляПечати.Вставить("ФИОКладовщика", "" + ДанныеПодотчетногоЛица.Представление);
			ДанныеДляПечати.Вставить("ДолжностьКладовщика", "" + ДанныеПодотчетногоЛица.Должность);
		Иначе 
			ДанныеДляПечати.Вставить("ФИОКладовщика", "");
			ДанныеДляПечати.Вставить("ДолжностьКладовщика", "");
		КонецЕсли;
	ИначеЕсли ЕстьУслуги Тогда
		Если ЗначениеЗаполнено(Шапка.Руководитель) И Шапка.Руководитель <> Руководители.Руководитель Тогда
			ДанныеПодотчетногоЛица = ОбщегоНазначения.ДанныеФизЛица(Шапка.Организация, Шапка.Руководитель, ДанныеСчетаФактуры.Дата);
			ФИОРуководителя = ОбщегоНазначения.ФамилияИнициалыФизЛица(Шапка.Руководитель) + " " + Шапка.ЗаРуководителяПоПриказу;
			ДанныеДляПечати.Вставить("ФИОКладовщика",		ФИОРуководителя);
			ДанныеДляПечати.Вставить("ДолжностьКладовщика", "" + ДанныеПодотчетногоЛица.Должность);
		Иначе
			ДанныеДляПечати.Вставить("ФИОКладовщика",       Руководители.РуководительПредставление);
			ДанныеДляПечати.Вставить("ДолжностьКладовщика", Руководители.РуководительДолжность);
		КонецЕсли;
	Иначе
		ДанныеДляПечати.Вставить("ФИОКладовщика", "");
		ДанныеДляПечати.Вставить("ДолжностьКладовщика", "");
	КонецЕсли;

	Если Не ЕстьТовары Тогда
		ДанныеДляПечати.Грузоотправитель = "";
		ДанныеДляПечати.Грузополучатель  = "";
		ДанныеДляПечати.АдресДоставки 	 = "";
	КонецЕсли;
	
	Возврат ДанныеДляПечати;

КонецФункции // СобратьДанныеПоРеализацияТоваровУслуг()

Функция СоздатьТаблицуДляЗаполнениеТабличнойЧастиДанныхПечати()

	Товары = Новый ТаблицаЗначений();

	Товары.Колонки.Добавить("Контрагент");
	Товары.Колонки.Добавить("Товар");
	Товары.Колонки.Добавить("ТоварНаименование");
	Товары.Колонки.Добавить("ТоварКод");
	Товары.Колонки.Добавить("ТоварАртикул");
	Товары.Колонки.Добавить("СтранаПроисхождения");
	Товары.Колонки.Добавить("СтранаПроисхожденияКод");
	Товары.Колонки.Добавить("ПредставлениеСтраны");
	Товары.Колонки.Добавить("НомерГТД");
	Товары.Колонки.Добавить("ПредставлениеГТД");
	Товары.Колонки.Добавить("Количество");
	Товары.Колонки.Добавить("ЕдиницаИзмерения");
	Товары.Колонки.Добавить("ЕдиницаИзмеренияКод");
	Товары.Колонки.Добавить("Цена");
	Товары.Колонки.Добавить("СтавкаНДС");
	Товары.Колонки.Добавить("СуммаНДС");
	Товары.Колонки.Добавить("Сумма");
	Товары.Колонки.Добавить("СуммаВключаетНДС");
	Товары.Колонки.Добавить("СТА_СуммаНДСРуб");
	Товары.Колонки.Добавить("СТА_СуммаРуб");
	
	Возврат Товары;

КонецФункции


//Процедура предназначена для изменения содержания нового (еще не записанного в базу) счета-фактуры.
Процедура ОбработатьСобытиеПослеСозданияСчетФактуры(Параметры)
	
	//СчетФактураОбъект= 	Параметры.СчетФактураОбъект;
	//РеализацияСсылка= 	Параметры.РеализацииСсылка;
	//Document= 			Параметры.Document;
	
	//СчетФактураОбъект.Комментарий= "Комментарий ПМ";
		
КонецПроцедуры //ОбработатьСобытиеПослеСозданияСчетФактуры()

//Процедура предназначена для изменения содержания нового (еще не записанного в базу) документа поступления.
Процедура ОбработатьСобытиеПослеЗаполненияНовогоДокументаПоступления(Параметры)
	
	//ДокументОбъект= Параметры.ДокументОбъект;
	//Document= 	  Параметры.Document;
	
	//ДокументОбъект.Комментарий= "Комментарий ПМ";
		
КонецПроцедуры //ОбработатьСобытиеПослеСозданияСчетФактуры()

// Функция предназначена для заполнения структуры определения места хранения поля номер_акта
//
//
Функция ОбработатьСобытиеТорговыеСетиЗаполнитьПараметрыХраненияНомераАкта(Параметры)
	
	/////////////////////////////////////////////////////////////////////////////////////
	// Вариант №1 значение поля "номер_акта" хранится в реквизите документа.
	/////////////////////////////////////////////////////////////////////////////////////
	Хранилище= "РеквизитДокумента";
	Ключ= 	   "НомерВходящегоСчетаФактуры"; // имя поля, в котором хранится номер акта.
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Вариант №2 значение поля "номер_акта" хранится как дополнительное свойство документа.
	////////////////////////////////////////////////////////////////////////////////////////////////////////
	//Хранилище= "ДополнительноеСвойство";
	//Ключ=  	   ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("ВнешнийНомер"); // Ссылка на дополнительное свойство документа, по которому хранится номер акта.
	
	
	ПараметрыХраненияНомераАкта= Новый Структура;
	ПараметрыХраненияНомераАкта.Вставить("Хранилище", Хранилище);
	ПараметрыХраненияНомераАкта.Вставить("Ключ"		, Ключ);
	
	Возврат ПараметрыХраненияНомераАкта;
	
КонецФункции

// Процедура предназначена для обработки подготовки коллекции выполняемых проверок документа
//
// Параметры
//	Параметры - <Структура> - Содержит коллекцию, переданных параметров
//
// Состав структуры:
//	КоллекцияПроверок - <ТаблицаЗначений> - Содержит перечень проверок, которые будет проходить документ.
//						Порядок выполнения проверок соответствует порядку строк в таблице.
//		Колонки таблицы:
//			ТипОшибки	   - <Строка> - Содержит следующие значения: "Ошибка", "Предупреждение", "Информация".
//			КлючОшибки	   - <Строка> - Уникальный идентификатор ошибки, пример: "НеправильныйКППКонтрагента".
//			ОписаниеОшибки - <Строка> - Пользовательское представление ошибки, может содержать детальную информацию.
//			СинонимОшибки  - <Строка> - Пользовательское представление ошибки, НЕ может содержать детальную информацию.
//											Необходимо заполнять если ошибка имеет тип "Предупреждение".
//
// 	Document 		  		  - <COMОбъект> - Объект Document AddInDiadocAPI.
// 	DocumentContent 		  - <COMОбъект> - Объектная модель данных Document AddInDiadocAPI.
// 	Документ1С 		  		  - <ДокументСсылка> - Ссылка на первичный документ в базе 1С для сопоставления.
// 	СписокДокументовНаПодпись - <СписокЗначений>
//			Значение	  - <ДокументСсылка> - Ссылка на первичный документ в базе 1С для сопоставления.
//			Представление - <Строка> 		 - DocumentId.
//
Процедура ОбработатьСобытиеТорговыеСетиПослеПроверкиДокумента(Параметры)
	
	КоллекцияОшибок= 			Параметры.КоллекцияОшибок;
	
	Document= 					Параметры.Document;
	DocumentContent= 			Параметры.DocumentContent;
	Документ1С= 				Параметры.Документ1С;
	СписокДокументовНаПодпись= 	Параметры.СписокДокументовНаПодпись;
	
	
	////////////////////////////////////////////////////
	// Пример переквалификации ошибки в предупреждение.
	////////////////////////////////////////////////////
	//ОшибкаНеправильныйКППКонтрагента= КоллекцияОшибок["НеправильныйКППКонтрагента"];
	//Если ОшибкаНеправильныйКППКонтрагента <> Неопределено Тогда
	//	ОшибкаНеправильныйКППКонтрагента.ТипОшибки= "Предупреждение";
	//	ОшибкаНеправильныйКППКонтрагента.СинонимОшибки= "Неправильный КПП поставщика";
	//КонецЕсли;
	
	
	////////////////////////////////////////////////////
	// Пример удаления ошибки КПП по определенному ящику.
	////////////////////////////////////////////////////
	Если КоллекцияОшибок["НеправильныйКППКонтрагента"] <> Неопределено И Document.Counteragent.Id = "8fd0af8abe934c7091b5ccd476ef1cb5@diadoc.ru" Тогда
		КоллекцияОшибок.Удалить("НеправильныйКППКонтрагента");
	КонецЕсли;
	
	
	///////////////////////////////////////////////////////////////////////////////
	// Пример отсрочки отказа в подписи по причине отсутствия документа в базе 1С.
	///////////////////////////////////////////////////////////////////////////////
	
	Если Document.type = "XMLTorg12" ИЛИ Document.type = "XmlAcceptanceCertificate" Тогда
		
		СтруктураОшибки= КоллекцияОшибок["ОшибкаВалидации"];
		
		Если СтруктураОшибки <> Неопределено И Найти(СтруктураОшибки.ОписаниеОшибки, "В нашей базе не найден документ") > 0 Тогда
			
			КрайняяДата= Document.DocumentDate + 7*60*60*24;
			
			Если КрайняяДата > ТекущаяДата() Тогда
				
				КоллекцияОшибок.Удалить("ОшибкаВалидации"); // Удаление стандартной ошибки
				
				ДобавитьОшибкуВКоллекцию(КоллекцияОшибок, "Предупреждение", "ОжиданиеРегистрацииДокумента", "Ожидает регистрацию документа в базе 1С до " + Формат(КрайняяДата, "ДФ=dd.MM.yyyy"), "Документы ожидающие регистрацию в базе 1С в течении 7 дней");
				//ДобавитьОшибкуВКоллекцию(КоллекцияОшибок, "ИсключительнаяОшибка", "ОжиданиеРегистрацииДокумента", "Ожидает регистрацию документа в базе 1С до " + Формат(КрайняяДата, "ДФ=dd.MM.yyyy"));
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОшибкаВалидации= КоллекцияОшибок["ОшибкаВалидации"];
	Если ОшибкаВалидации <> Неопределено И Найти(ОшибкаВалидации.ОписаниеОшибки, "номер_акта") > 0
		И Document.Counteragent.Id = "8fd0af8abe934c7091b5ccd476ef1cb5@diadoc.ru" Тогда
		
		КоллекцияОшибок.Очистить();
		
		ДобавитьОшибкуВКоллекцию(КоллекцияОшибок, "Предупреждение", "КонтрагентНеТоварный", "Контрагент не поставляет товары", "Контрагент не поставляет товары");
		
		Если Document.Department = Неопределено Тогда
			ДобавитьОшибкуВКоллекцию(КоллекцияОшибок, "Предупреждение", "ПеремещениеВПодразделение3", "Документ будет перемещен в Подразделение 3", "Документ будет перемещен в Подразделение 3");
		КонецЕсли;
				
	КонецЕсли;
		
	
	
	////////////////////////////////////////////////////
	// Пример добавления кастомной ошибки в коллекцию ошибок.
	////////////////////////////////////////////////////
	//ДобавитьОшибкуВКоллекцию(КоллекцияОшибок, "Ошибка", "КастомнаяУникальнаяОшибка", "Все неправильно!");

КонецПроцедуры

Процедура ДобавитьОшибкуВКоллекцию(КоллекцияОшибок, ТипОшибки, КлючОшибки, ОписаниеОшибки, СинонимОшибки= "")
	
	СтруктураОшибки= Новый Структура;
	СтруктураОшибки.Вставить("ТипОшибки"	 , ТипОшибки	 );
	СтруктураОшибки.Вставить("КлючОшибки"	 , КлючОшибки	 );
	СтруктураОшибки.Вставить("ОписаниеОшибки", ОписаниеОшибки);
	СтруктураОшибки.Вставить("СинонимОшибки" , СинонимОшибки );
	
	КоллекцияОшибок.Вставить(КлючОшибки, СтруктураОшибки);
	
КонецПроцедуры

// Процедура предназначена для выполнения кастомных действий после сопоставления документа
//
// Параметры
//	Параметры - <Структура> - Содержит коллекцию, переданных параметров
//
// Состав структуры:
// 	СтрокаТаблицы 	- <СтрокаТаблицыЗначений> - Строка таблицы документов.
// 	DocumentContent - <COMОбъект> 			  - Объектная модель данных Document AddInDiadocAPI.
//
Процедура ОбработатьСобытиеТорговыеСетиПослеСопоставленияДокумента(Параметры)
	
	СтрокаТаблицы= Параметры.СтрокаТаблицы;
	
	Document=	СтрокаТаблицы.ЭДОбъект;
	Документ1С= СтрокаТаблицы.ПервичныйДокумент;
	
	ЕстьОтклонениеСуммыНДСВПределахДопустимого= Ложь;
	
	Для Каждого ЭлементСписка ИЗ СтрокаТаблицы.СписокОшибок Цикл
		
		Если ЭлементСписка.Представление = "ОтклонениеСуммыНДСВПределахДопустимого" Тогда
			ЕстьОтклонениеСуммыНДСВПределахДопустимого= Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
			
	Если ЕстьОтклонениеСуммыНДСВПределахДопустимого Тогда
		
		DocumentContent= Document.GetContent();
		
		// Действие по регистрации документа корректировки.
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура предназначена для выполнения кастомных действий после сопоставления документа
//
// Параметры
//	Параметры - <Структура> - Содержит коллекцию, переданных параметров
//
// Состав структуры:
// 	СтрокаТаблицы 	- <СтрокаТаблицыЗначений> - Строка таблицы документов.
// 	DocumentContent - <COMОбъект> 			  - Объектная модель данных Document AddInDiadocAPI.
//
Процедура ОбработатьСобытиеТорговыеСетиПослеВыполненияОбработкиДокумента(Параметры)
	
	СтрокаТаблицы= Параметры.СтрокаТаблицы;
	
	Document=	СтрокаТаблицы.ЭДОбъект;
	Документ1С= СтрокаТаблицы.ПервичныйДокумент;
	
	Для Каждого ЭлементСписка ИЗ СтрокаТаблицы.СписокОшибок Цикл
		
		Если ЭлементСписка.Представление = "ПеремещениеВПодразделение3" Тогда
			Document.Move("0aad6a8e-bf0f-427c-a565-a64d0b1b3688");
			СтрокаТаблицы.Подразделение= "Подразделение 3";
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если (СтрокаТаблицы.СостояниеДокументооборота = "Документооборот не завершен. Требует уточнения" ИЛИ СтрокаТаблицы.СостояниеДокументооборота = "Отказано в подписи")
		 И Document.Department = Неопределено
	Тогда
		Document.Move("0aad6a8e-bf0f-427c-a565-a64d0b1b3688");
		СтрокаТаблицы.Подразделение= "Подразделение 3";
	КонецЕсли;
	
КонецПроцедуры


// Возвращает объект ВнешнейОбработки, который прикидывается объектом ТабличныйДокумент и позволяет парсить печатные формы.
Функция ЭДО_ПодключаемыйМодуль_ПолучитьЭмуляторТабличногоДокумента() Экспорт
	
	Результат = Неопределено;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("epf");
	ПолучитьМакет("ЭмуляторТабличногоДокумента_epf").Записать(ИмяВременногоФайла);
	
	Результат = ВнешниеОбработки.Создать(ИмяВременногоФайла,Ложь);
	
	УдалитьФайлы(ИмяВременногоФайла);
		
	Возврат Результат;
	
КонецФункции

Функция ЭДО_ПодключаемыйМодуль_ПолучитьВнешнююПечатнуюФорму(ДокументСсылка, НаименованиеОбработки)
	
	МетаданныеОбъекта = ДокументСсылка.Метаданные();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВнешниеОбработкиПринадлежность.Ссылка КАК Ссылка,
	|	ВнешниеОбработкиПринадлежность.ХранилищеВнешнейОбработки КАК ХранилищеВнешнейОбработки
	|ИЗ
	|	Справочник.ВнешниеОбработки.Принадлежность КАК ВнешниеОбработкиПринадлежность
	|ГДЕ
	|	НЕ ВнешниеОбработкиПринадлежность.Ссылка.ПометкаУдаления
	|	И ВнешниеОбработкиПринадлежность.СсылкаОбъекта = &Ссылка
	|	И ВнешниеОбработкиПринадлежность.Ссылка.Наименование = &НаименованиеОбработки
	|	И ВнешниеОбработкиПринадлежность.Ссылка.ВидОбработки = &ВидОбработки";
	
	Запрос.УстановитьПараметр("НаименованиеОбработки", НаименованиеОбработки);
	Запрос.УстановитьПараметр("ВидОбработки", Перечисления.ВидыДополнительныхВнешнихОбработок.ПечатнаяФорма);
	Запрос.УстановитьПараметр("Ссылка", Документы[МетаданныеОбъекта.Имя].ПустаяСсылка());
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
			
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("epf");
		Выборка.Ссылка.ХранилищеВнешнейОбработки.Получить().Записать(ИмяВременногоФайла);		
		ВнешняяПечатнаяФорма = ВнешниеОбработки.Создать(ИмяВременногоФайла, Ложь);		
		УдалитьФайлы(ИмяВременногоФайла);
		
		ВнешняяПечатнаяФорма.ДокументСсылка = ДокументСсылка;
		
		Возврат ВнешняяПечатнаяФорма;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;	
	
КонецФункции