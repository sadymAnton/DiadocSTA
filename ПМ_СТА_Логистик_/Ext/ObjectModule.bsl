// DDSUPPORT-7444

Перем ОсновнойМодуль;

Процедура Инициализировать(ОбработкаДиадок) Экспорт
	
	ОсновнойМодуль = ОбработкаДиадок;
	
КонецПроцедуры

Функция ОбработатьСобытиеДиадок(ИмяСобытия, Параметры, СтандартнаяОбработкаДиадок = Истина) Экспорт

	Если ИмяСобытия = "ПослеЗаполненияКонтента" Тогда    
		
		Возврат ОбработатьСобытиеПослеЗаполненияКонтента(Параметры);
		
	ИначеЕсли ИмяСобытия = "ПослеСозданияСчетФактуры" Тогда
		
		//ОбработатьСобытиеПослеСозданияСчетФактуры(Параметры);
		
	ИначеЕсли ИмяСобытия = "ПослеЗаполненияНовогоДокументаПоступления" Тогда
		
		//ОбработатьСобытиеПослеЗаполненияНовогоДокументаПоступления(Параметры);
	
	ИначеЕсли ИмяСобытия = "ТорговыеСетиЗаполнитьПараметрыХраненияНомераАкта" Тогда
		
		//Возврат ОбработатьСобытиеТорговыеСетиЗаполнитьПараметрыХраненияНомераАкта(Параметры);
		
	ИначеЕсли ИмяСобытия = "ТорговыеСетиПослеПроверкиДокумента" Тогда
		
		//ОбработатьСобытиеТорговыеСетиПослеПроверкиДокумента(Параметры);
		
	ИначеЕсли ИмяСобытия = "ТорговыеСетиПослеСопоставленияДокумента" Тогда
		
		//ОбработатьСобытиеТорговыеСетиПослеСопоставленияДокумента(Параметры);
		
	ИначеЕсли ИмяСобытия = "ТорговыеСетиПослеВыполненияОбработкиДокумента" Тогда
		
		//ОбработатьСобытиеТорговыеСетиПослеВыполненияОбработкиДокумента(Параметры);
		
	КонецЕсли;
	
КонецФункции

// Функция предназначена для изменения стандартного контента
//
// Параметры
//  Параметры - <Структура> - Содержит коллекцию, переданных параметров
// Возвращаемое значение:
//	Структура - Возвращает структуру, содержащую контент, соответствующего 
//				типа электронного документа
//
Функция ОбработатьСобытиеПослеЗаполненияКонтента(Параметры)

	DocumentType 	= Параметры.DocumentType;
	Content 		= Параметры.Content;
	ДокументСсылка 	= Параметры.ДокументСсылка;
	
	Если DocumentType = "XmlTorg12" Тогда
		
		// пример использования обработки события
		// пользователю необходимо, чтобы в ТОРГ12, который он отправляет контрагенту, в наименовании товара через точку с пробелом отображался основной поставщик товара,
		// а так же не обрезались лидирующие нули в номере накладной.
								
		//Данные 			= Параметры.Данные;
		//Content.Number 	= ДокументСсылка.Номер;
							
		//сч = 0;
		//Для Каждого Стр Из Content.Items Цикл
		//	
		//	СтрокаДанных 	= Данные.ТаблицаТоваров[сч];
		//	Стр.Product 	= СтрокаДанных.НоменклатураСсылка.Наименование+". "+СокрЛП(СтрокаДанных.НоменклатураСсылка.ОсновнойПоставщик);
		//	
		//	сч = сч+1;
		//	
		//КонецЦикла;
		
		//Возврат Content;
		
	ИначеЕсли DocumentType = "XmlAcceptanceCertificate" Тогда
		
		//Исходное заполнение контента: Процедура ЗаполнитьКонтентXmlAcceptanceCertificateПоДанным()
		
		ЭмуляторТабДок = ЭДО_ПодключаемыйМодуль_ПолучитьЭмуляторТабличногоДокумента();
		ОбъектВПФ = ЭДО_ПодключаемыйМодуль_ПолучитьВнешнююПечатнуюФорму(ДокументСсылка, "Акт измененный");
		ОбъектВПФ.Печать(ЭмуляторТабДок);
		
		МассивСтрокДокумента = Новый Массив;
		Для Каждого Элемент Из ЭмуляторТабДок.ПараметрыВыведенныхОбластей Цикл
			Если Элемент.ИмяОбласти = "Строка" ИЛИ Элемент.ИмяОбласти = "СтрокаВалюта" Тогда
				МассивСтрокДокумента.Добавить(Элемент.Параметры);
			КонецЕсли;
		КонецЦикла;
		
		Content.items.Очистить();
		ИтогоСуммаВВалюте = 0;
		
		Для Каждого СтрокаТаблицы Из МассивСтрокДокумента Цикл
			
			СуммаРуб = ?(СтрокаТаблицы.Свойство("СуммаРуб"), СтрокаТаблицы.СуммаРуб, СтрокаТаблицы.Сумма);
			
			НоваяСтрока = Content.items.Добавить();
			НоваяСтрока.Description = СтрокаТаблицы.Товар;
			НоваяСтрока.Vat = СтрокаТаблицы.СуммаНДС;
			НоваяСтрока.TotalWithVatExcluded = СуммаРуб - СтрокаТаблицы.СуммаНДС;
			НоваяСтрока.Total = СуммаРуб;
									
			Если ДокументСсылка.ВалютаДокумента <> Константы.ВалютаРегламентированногоУчета.Получить() Тогда
				НоваяСтрока.AdditionalInfo = "Сумма в валюте: "+Формат(СтрокаТаблицы.Сумма, "ЧДЦ=2")+" "+ДокументСсылка.ВалютаДокумента;
				ИтогоСуммаВВалюте = ИтогоСуммаВВалюте + СтрокаТаблицы.Сумма;
			КонецЕсли;
			
		КонецЦикла;		
		
		Если ИтогоСуммаВВалюте <> 0 Тогда
			Content.AdditionalInfo = "Итого сумма в валюте: "+Формат(ИтогоСуммаВВалюте, "ЧДЦ=2")+" "+ДокументСсылка.ВалютаДокумента;
		КонецЕсли;
		
		Content.Number = Лев(СокрЛП(Параметры.ДокументСсылка.ДоговорКонтрагента.Наименование), 14);
		Content.Title = СтрЗаменить(Content.Title, "Исполнитель", "Экспедитор");
		
	ИначеЕсли DocumentType = "Invoice" Тогда
		
		//Исходное заполнение контента: Функция ЗаполнитьКонтентInvoiceПоДаннымДляПечати()

		ОбъектВПФ = ЭДО_ПодключаемыйМодуль_ПолучитьВнешнююПечатнуюФорму(ДокументСсылка, "Счет фактура1137");
		ЭмуляторТабДок = ЭДО_ПодключаемыйМодуль_ПолучитьЭмуляторТабличногоДокумента();
		ОбъектВПФ.ТекДанные = Новый Структура("Подписант, РасчетыВУсловныхЕдиницах, ФлагПодписи", "", Ложь, Ложь);
		
		ДанныеДляПечати = ОбъектВПФ.ПодготовитьОбщиеДанныеДляПечатиСчетаФактуры();
		Макет = ОбъектВПФ.ПолучитьМакет("СчетФактура1137");
		ОбъектВПФ.ВывестиСчетФактуруВТабличныйДокумент(ЭмуляторТабДок, Макет, ДанныеДляПечати);
		
		ДанныеДляПечати.Вставить("СФНаАванс", ОсновнойМодуль.Модуль_ИнтеграцияОбщий.ЭтоСчетФактуранаАванс(ДокументСсылка));
		
		ОбластьШапки = Неопределено;
		ОбластьКомиссионера = Неопределено;
		
		МассивСтрокДокумента = Новый Массив;
		Для Каждого Элемент Из ЭмуляторТабДок.ПараметрыВыведенныхОбластей Цикл
			Если Элемент.ИмяОбласти = "Строка" Тогда
				МассивСтрокДокумента.Добавить(Элемент.Параметры);
			ИначеЕсли Элемент.ИмяОбласти = "Шапка" Тогда
				ОбластьШапки = Элемент.Параметры;
			ИначеЕсли Элемент.ИмяОбласти = "РеквизитыКомиссионера" Тогда
				ОбластьКомиссионера = Элемент.Параметры;
			КонецЕсли;
		КонецЦикла;
		
		ОсновнойМодуль.Модуль_ИнтеграцияОбщий.ЗаполнитьСтруктурируЮрФизЛица(Content.Seller, ОбластьШапки.Поставщик, ДанныеДляПечати.Дата, , Истина, Истина);
		
		Vat = неопределено;
		TotalWithVatExcluded = 0;
		Total = 0;
		
		Content.items.Очистить();
		
		Для Каждого стр Из МассивСтрокДокумента Цикл
			
			item = content.items.добавить();
			
			item.Product = стр.ТоварНаименование;//стр.Номенклатура;
			
			Если (стр.Количество = 0) или (ЗначениеЗаполнено(стр.ЕдиницаИзмерения) = ложь) ИЛИ стр.ЕдиницаИзмерения =  "--" Тогда
				item.UnitCode 				= Неопределено;
				item.ЕдиницаИзмеренияСсылка = Неопределено;
				item.Quantity 				= Неопределено;
			Иначе
				item.UnitCode 				= стр.ЕдиницаИзмеренияКод;//?(ЗначениеЗаполнено(стр.ЕдиницаИзмерения),  стр.ЕдиницаИзмерения.Код, "");
				item.ЕдиницаИзмеренияСсылка = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(стр.ЕдиницаИзмеренияКод);//стр.ЕдиницаИзмерения;
				item.Quantity 				= стр.Количество;
			КонецЕсли;
			
			Если  ДанныеДляПечати.СФНаАванс = Ложь Тогда 
				item.TotalWithVatExcluded 	= стр.Всего - ?(ТипЗнч(стр.СуммаНДС) = Тип("Число"), стр.СуммаНДС, 0);//стр.сумма - ?(стр.СуммаВключаетНДС, стр.суммаНДС, 0) ;
				
				Если ЗначениеЗаполнено(item.Quantity) = Истина Тогда					
					Стр.Цена = ?(Стр.Цена = "--", 0, Стр.Цена);//					
					РасчетнаяЦена = окр(item.TotalWithVatExcluded/item.Quantity, 2);
					ОтклонениеОтРасчетной =  (РасчетнаяЦена-Стр.Цена)*стр.Количество;
					Если макс(ОтклонениеОтРасчетной, -ОтклонениеОтРасчетной)>0.03 Тогда//(Стр.СуммаВключаетНДС = Истина) или (макс(ОтклонениеОтРасчетной, -ОтклонениеОтРасчетной)>0.03)  Тогда
						item.price = РасчетнаяЦена;	
					Иначе
						item.price = Стр.Цена;	
					КонецЕсли;
					
				Иначе
					item.price = Неопределено;	
				КонецЕсли;
			КонецЕсли;	
			
			Item.Vat						= ?(стр.СтавкаНДС="без НДС", неопределено, Стр.СуммаНДС);
			Item.Total						= стр.Всего;//стр.сумма + ?(стр.СуммаВключаетНДС, 0, стр.суммаНДС);
			Item.TaxRate               		= ОсновнойМодуль.Модуль_ИнтеграцияОбщий.ПолучитьПредставлениеСтавкиНДС(?(стр.СтавкаНДС = "без НДС", Перечисления.СтавкиНДС.БезНДС, стр.СтавкаНДС), Истина);//стр.СтавкаНДС;
			Item.CountriesOfOrigin  		= ?(ЗначениеЗаполнено(Стр.СтранаПроисхожденияКод) И Стр.СтранаПроисхожденияКод <> "--", Стр.СтранаПроисхожденияКод, "");//?(значениеЗаполнено(Стр.СтранаПроисхождения), Стр.СтранаПроисхождения.код, "");
			Item.СтранаПроисхожденияСсылка 	= ?(значениеЗаполнено(Стр.СтранаПроисхождения), Стр.СтранаПроисхождения, Справочники.КлассификаторСтранМира.ПустаяСсылка());
			Item.CustomsDeclarationNumbers 	= ОсновнойМодуль.Модуль_ИнтеграцияОбщий.ПолучитьНомерГТД(Стр.НомерГТД);
			
			// считаем итог по ндс так, чтобы если во всех строказ суммаНДС=неопределено, то и итог по суммеНДС = неопределено
			Если  (Item.Vat <> Неопределено) Тогда 
				Vat = ?(Vat = Неопределено, 0, Vat) + Item.Vat;
			КонецЕсли;	
			
			TotalWithVatExcluded 	= TotalWithVatExcluded  + ?(Item.TotalWithVatExcluded=неопределено, 0, Item.TotalWithVatExcluded);
			Total 					= Total 				+ Item.Total;
			
			item.StructedAdditionalInfos = Новый Массив;//			
		КонецЦикла;
		
		//заполняем итоги
		
		Content.Totals.Vat 					= Vat;
		Content.Totals.TotalWithVatExcluded = TotalWithVatExcluded;
		Content.Totals.Total 				= Total;
		
		//данные об экспедиторе (организации-отправителе ЭСФ)
		
		Если ОбластьКомиссионера <> Неопределено И ЗначениеЗаполнено(ОбластьКомиссионера.ПредставлениеКомиссионера) Тогда		
			
			StructedAdditionalInfosItem = Новый Структура("Key, Value", "_", ОбластьКомиссионера.ПредставлениеКомиссионера);
			Content.StructedAdditionalInfos = Новый Массив;
			Content.StructedAdditionalInfos.Добавить(StructedAdditionalInfosItem);
			
		КонецЕсли;
				
	ИначеЕсли DocumentType = "InvoiceCorrection" Тогда
		
		// какой-то код кастомизации контента
		// обязательно Возврат
		
	КонецЕсли;	

	Возврат Content;
	
КонецФункции // ОбработатьСобытиеПослеЗаполненияКонтента()

//Процедура предназначена для изменения содержания нового (еще не записанного в базу) счета-фактуры.
Процедура ОбработатьСобытиеПослеСозданияСчетФактуры(Параметры)
	
	//СчетФактураОбъект= 	Параметры.СчетФактураОбъект;
	//РеализацияСсылка= 	Параметры.РеализацииСсылка;
	//Document= 			Параметры.Document;
	
	//СчетФактураОбъект.Комментарий= "Комментарий ПМ";
		
КонецПроцедуры //ОбработатьСобытиеПослеСозданияСчетФактуры()

//Процедура предназначена для изменения содержания нового (еще не записанного в базу) документа поступления.
Процедура ОбработатьСобытиеПослеЗаполненияНовогоДокументаПоступления(Параметры)
	
	//ДокументОбъект= Параметры.ДокументОбъект;
	//Document= 	  Параметры.Document;
	
	//ДокументОбъект.Комментарий= "Комментарий ПМ";
		
КонецПроцедуры //ОбработатьСобытиеПослеСозданияСчетФактуры()

// Функция предназначена для заполнения структуры определения места хранения поля номер_акта
//
//
Функция ОбработатьСобытиеТорговыеСетиЗаполнитьПараметрыХраненияНомераАкта(Параметры)
	
	/////////////////////////////////////////////////////////////////////////////////////
	// Вариант №1 значение поля "номер_акта" хранится в реквизите документа.
	/////////////////////////////////////////////////////////////////////////////////////
	Хранилище= "РеквизитДокумента";
	Ключ= 	   "НомерВходящегоСчетаФактуры"; // имя поля, в котором хранится номер акта.
	
	////////////////////////////////////////////////////////////////////////////////////////////////////////
	// Вариант №2 значение поля "номер_акта" хранится как дополнительное свойство документа.
	////////////////////////////////////////////////////////////////////////////////////////////////////////
	//Хранилище= "ДополнительноеСвойство";
	//Ключ=  	   ПланыВидовХарактеристик.СвойстваОбъектов.НайтиПоНаименованию("ВнешнийНомер"); // Ссылка на дополнительное свойство документа, по которому хранится номер акта.
	
	
	ПараметрыХраненияНомераАкта= Новый Структура;
	ПараметрыХраненияНомераАкта.Вставить("Хранилище", Хранилище);
	ПараметрыХраненияНомераАкта.Вставить("Ключ"		, Ключ);
	
	Возврат ПараметрыХраненияНомераАкта;
	
КонецФункции

// Процедура предназначена для обработки подготовки коллекции выполняемых проверок документа
//
// Параметры
//	Параметры - <Структура> - Содержит коллекцию, переданных параметров
//
// Состав структуры:
//	КоллекцияПроверок - <ТаблицаЗначений> - Содержит перечень проверок, которые будет проходить документ.
//						Порядок выполнения проверок соответствует порядку строк в таблице.
//		Колонки таблицы:
//			ТипОшибки	   - <Строка> - Содержит следующие значения: "Ошибка", "Предупреждение", "Информация".
//			КлючОшибки	   - <Строка> - Уникальный идентификатор ошибки, пример: "НеправильныйКППКонтрагента".
//			ОписаниеОшибки - <Строка> - Пользовательское представление ошибки, может содержать детальную информацию.
//			СинонимОшибки  - <Строка> - Пользовательское представление ошибки, НЕ может содержать детальную информацию.
//											Необходимо заполнять если ошибка имеет тип "Предупреждение".
//
// 	Document 		  		  - <COMОбъект> - Объект Document AddInDiadocAPI.
// 	DocumentContent 		  - <COMОбъект> - Объектная модель данных Document AddInDiadocAPI.
// 	Документ1С 		  		  - <ДокументСсылка> - Ссылка на первичный документ в базе 1С для сопоставления.
// 	СписокДокументовНаПодпись - <СписокЗначений>
//			Значение	  - <ДокументСсылка> - Ссылка на первичный документ в базе 1С для сопоставления.
//			Представление - <Строка> 		 - DocumentId.
//
Процедура ОбработатьСобытиеТорговыеСетиПослеПроверкиДокумента(Параметры)
	
	КоллекцияОшибок= 			Параметры.КоллекцияОшибок;
	
	Document= 					Параметры.Document;
	DocumentContent= 			Параметры.DocumentContent;
	Документ1С= 				Параметры.Документ1С;
	СписокДокументовНаПодпись= 	Параметры.СписокДокументовНаПодпись;
	
	
	////////////////////////////////////////////////////
	// Пример переквалификации ошибки в предупреждение.
	////////////////////////////////////////////////////
	//ОшибкаНеправильныйКППКонтрагента= КоллекцияОшибок["НеправильныйКППКонтрагента"];
	//Если ОшибкаНеправильныйКППКонтрагента <> Неопределено Тогда
	//	ОшибкаНеправильныйКППКонтрагента.ТипОшибки= "Предупреждение";
	//	ОшибкаНеправильныйКППКонтрагента.СинонимОшибки= "Неправильный КПП поставщика";
	//КонецЕсли;
	
	
	////////////////////////////////////////////////////
	// Пример удаления ошибки КПП по определенному ящику.
	////////////////////////////////////////////////////
	Если КоллекцияОшибок["НеправильныйКППКонтрагента"] <> Неопределено И Document.Counteragent.Id = "8fd0af8abe934c7091b5ccd476ef1cb5@diadoc.ru" Тогда
		КоллекцияОшибок.Удалить("НеправильныйКППКонтрагента");
	КонецЕсли;
	
	
	///////////////////////////////////////////////////////////////////////////////
	// Пример отсрочки отказа в подписи по причине отсутствия документа в базе 1С.
	///////////////////////////////////////////////////////////////////////////////
	
	Если Document.type = "XMLTorg12" ИЛИ Document.type = "XmlAcceptanceCertificate" Тогда
		
		СтруктураОшибки= КоллекцияОшибок["ОшибкаВалидации"];
		
		Если СтруктураОшибки <> Неопределено И Найти(СтруктураОшибки.ОписаниеОшибки, "В нашей базе не найден документ") > 0 Тогда
			
			КрайняяДата= Document.DocumentDate + 7*60*60*24;
			
			Если КрайняяДата > ТекущаяДата() Тогда
				
				КоллекцияОшибок.Удалить("ОшибкаВалидации"); // Удаление стандартной ошибки
				
				ДобавитьОшибкуВКоллекцию(КоллекцияОшибок, "Предупреждение", "ОжиданиеРегистрацииДокумента", "Ожидает регистрацию документа в базе 1С до " + Формат(КрайняяДата, "ДФ=dd.MM.yyyy"), "Документы ожидающие регистрацию в базе 1С в течении 7 дней");
				//ДобавитьОшибкуВКоллекцию(КоллекцияОшибок, "ИсключительнаяОшибка", "ОжиданиеРегистрацииДокумента", "Ожидает регистрацию документа в базе 1С до " + Формат(КрайняяДата, "ДФ=dd.MM.yyyy"));
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОшибкаВалидации= КоллекцияОшибок["ОшибкаВалидации"];
	Если ОшибкаВалидации <> Неопределено И Найти(ОшибкаВалидации.ОписаниеОшибки, "номер_акта") > 0
		И Document.Counteragent.Id = "8fd0af8abe934c7091b5ccd476ef1cb5@diadoc.ru" Тогда
		
		КоллекцияОшибок.Очистить();
		
		ДобавитьОшибкуВКоллекцию(КоллекцияОшибок, "Предупреждение", "КонтрагентНеТоварный", "Контрагент не поставляет товары", "Контрагент не поставляет товары");
		
		Если Document.Department = Неопределено Тогда
			ДобавитьОшибкуВКоллекцию(КоллекцияОшибок, "Предупреждение", "ПеремещениеВПодразделение3", "Документ будет перемещен в Подразделение 3", "Документ будет перемещен в Подразделение 3");
		КонецЕсли;
				
	КонецЕсли;
		
	
	
	////////////////////////////////////////////////////
	// Пример добавления кастомной ошибки в коллекцию ошибок.
	////////////////////////////////////////////////////
	//ДобавитьОшибкуВКоллекцию(КоллекцияОшибок, "Ошибка", "КастомнаяУникальнаяОшибка", "Все неправильно!");

КонецПроцедуры

Процедура ДобавитьОшибкуВКоллекцию(КоллекцияОшибок, ТипОшибки, КлючОшибки, ОписаниеОшибки, СинонимОшибки= "")
	
	СтруктураОшибки= Новый Структура;
	СтруктураОшибки.Вставить("ТипОшибки"	 , ТипОшибки	 );
	СтруктураОшибки.Вставить("КлючОшибки"	 , КлючОшибки	 );
	СтруктураОшибки.Вставить("ОписаниеОшибки", ОписаниеОшибки);
	СтруктураОшибки.Вставить("СинонимОшибки" , СинонимОшибки );
	
	КоллекцияОшибок.Вставить(КлючОшибки, СтруктураОшибки);
	
КонецПроцедуры

// Процедура предназначена для выполнения кастомных действий после сопоставления документа
//
// Параметры
//	Параметры - <Структура> - Содержит коллекцию, переданных параметров
//
// Состав структуры:
// 	СтрокаТаблицы 	- <СтрокаТаблицыЗначений> - Строка таблицы документов.
// 	DocumentContent - <COMОбъект> 			  - Объектная модель данных Document AddInDiadocAPI.
//
Процедура ОбработатьСобытиеТорговыеСетиПослеСопоставленияДокумента(Параметры)
	
	СтрокаТаблицы= Параметры.СтрокаТаблицы;
	
	Document=	СтрокаТаблицы.ЭДОбъект;
	Документ1С= СтрокаТаблицы.ПервичныйДокумент;
	
	ЕстьОтклонениеСуммыНДСВПределахДопустимого= Ложь;
	
	Для Каждого ЭлементСписка ИЗ СтрокаТаблицы.СписокОшибок Цикл
		
		Если ЭлементСписка.Представление = "ОтклонениеСуммыНДСВПределахДопустимого" Тогда
			ЕстьОтклонениеСуммыНДСВПределахДопустимого= Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
			
	Если ЕстьОтклонениеСуммыНДСВПределахДопустимого Тогда
		
		DocumentContent= Document.GetContent();
		
		// Действие по регистрации документа корректировки.
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура предназначена для выполнения кастомных действий после сопоставления документа
//
// Параметры
//	Параметры - <Структура> - Содержит коллекцию, переданных параметров
//
// Состав структуры:
// 	СтрокаТаблицы 	- <СтрокаТаблицыЗначений> - Строка таблицы документов.
// 	DocumentContent - <COMОбъект> 			  - Объектная модель данных Document AddInDiadocAPI.
//
Процедура ОбработатьСобытиеТорговыеСетиПослеВыполненияОбработкиДокумента(Параметры)
	
	СтрокаТаблицы= Параметры.СтрокаТаблицы;
	
	Document=	СтрокаТаблицы.ЭДОбъект;
	Документ1С= СтрокаТаблицы.ПервичныйДокумент;
	
	Для Каждого ЭлементСписка ИЗ СтрокаТаблицы.СписокОшибок Цикл
		
		Если ЭлементСписка.Представление = "ПеремещениеВПодразделение3" Тогда
			Document.Move("0aad6a8e-bf0f-427c-a565-a64d0b1b3688");
			СтрокаТаблицы.Подразделение= "Подразделение 3";
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если (СтрокаТаблицы.СостояниеДокументооборота = "Документооборот не завершен. Требует уточнения" ИЛИ СтрокаТаблицы.СостояниеДокументооборота = "Отказано в подписи")
		 И Document.Department = Неопределено
	Тогда
		Document.Move("0aad6a8e-bf0f-427c-a565-a64d0b1b3688");
		СтрокаТаблицы.Подразделение= "Подразделение 3";
	КонецЕсли;
	
КонецПроцедуры


// Возвращает объект ВнешнейОбработки, который прикидывается объектом ТабличныйДокумент и позволяет парсить печатные формы.
Функция ЭДО_ПодключаемыйМодуль_ПолучитьЭмуляторТабличногоДокумента() Экспорт
	
	Результат = Неопределено;
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("epf");
	ПолучитьМакет("ЭмуляторТабличногоДокумента_epf").Записать(ИмяВременногоФайла);
	
	Результат = ВнешниеОбработки.Создать(ИмяВременногоФайла,Ложь);
	
	УдалитьФайлы(ИмяВременногоФайла);
		
	Возврат Результат;
	
КонецФункции

Функция ЭДО_ПодключаемыйМодуль_ПолучитьВнешнююПечатнуюФорму(ДокументСсылка, НаименованиеОбработки)
	
	МетаданныеОбъекта = ДокументСсылка.Метаданные();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВнешниеОбработкиПринадлежность.Ссылка КАК Ссылка,
	|	ВнешниеОбработкиПринадлежность.ХранилищеВнешнейОбработки КАК ХранилищеВнешнейОбработки
	|ИЗ
	|	Справочник.ВнешниеОбработки.Принадлежность КАК ВнешниеОбработкиПринадлежность
	|ГДЕ
	|	НЕ ВнешниеОбработкиПринадлежность.Ссылка.ПометкаУдаления
	|	И ВнешниеОбработкиПринадлежность.СсылкаОбъекта = &Ссылка
	|	И ВнешниеОбработкиПринадлежность.Ссылка.Наименование = &НаименованиеОбработки
	|	И ВнешниеОбработкиПринадлежность.Ссылка.ВидОбработки = &ВидОбработки";
	
	Запрос.УстановитьПараметр("НаименованиеОбработки", НаименованиеОбработки);
	Запрос.УстановитьПараметр("ВидОбработки", Перечисления.ВидыДополнительныхВнешнихОбработок.ПечатнаяФорма);
	Запрос.УстановитьПараметр("Ссылка", Документы[МетаданныеОбъекта.Имя].ПустаяСсылка());
		
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
			
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("epf");
		Выборка.Ссылка.ХранилищеВнешнейОбработки.Получить().Записать(ИмяВременногоФайла);		
		ВнешняяПечатнаяФорма = ВнешниеОбработки.Создать(ИмяВременногоФайла, Ложь);		
		УдалитьФайлы(ИмяВременногоФайла);
		
		ВнешняяПечатнаяФорма.СсылкаНаОбъект = ДокументСсылка;
		
		Возврат ВнешняяПечатнаяФорма;
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;	
	
КонецФункции